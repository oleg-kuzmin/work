//# componentDidMount
// Рождение - исполняется один раз при (рождении) монтировании - когда компонент вставлен в DOM
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: false,
      character: {},
    };
  }
  componentDidMount() {
    this.setState({ loading: true });
    fetch("https://swapi.dev/api/people/1")
      .then((response) => response.json())
      .then((data) =>
        this.setState({
          character: data,
          loading: false,
        })
      );
  }
  render() {
    const text = this.state.loading ? "loading" : this.state.character.name;
    return <div>{text}</div>;
  }
}

//# shouldComponentUpdate
// Он, если продолжить сравнение компонента с человеком, напоминает момент, когда человек // размышляет о том, надо ли ему переодеться или нет. В обычных условиях, если React не вполне уверен в том, надо ли повторно отрендерить компонент, он его, на всякий случай, всё же отрендерит. При этом неважно — нужно ли это, в соответствии с логикой приложения, или нет. Это приводит к тому, что React повторно рендерит компоненты даже в тех случаях, когда ничего, имеющего отношение к компоненту, не меняется. Подобное может привести к замедлению приложения, так как по такому принципу React обрабатывает все компоненты, входящие в состав приложения. Метод shouldComponentUpdate()​даёт разработчику возможность оптимизировать приложение. Здесь можно реализовать некую логику, помогающую выяснить необходимость обновления компонента. Этот метод обычно объявляют так:
// shouldComponentUpdate(nextProps, nextState) {
// вернуть true если компонент нуждается в обновлении
// вернуть false в противном случае
// }
// При этом из этого метода, если компонент нуждается в повторном рендеринге, с учётом новых свойств и состояния, нужно вернуть ​true​. В противном случае из него нужно вернуть ​ false​ . Собственно говоря, возврат ​ false​из этого метода приводит к тому, что обновление компонента не выполняется и приложение работает быстрее, но, делая это, нужно быть уверенным в том, что компоненту действительно не требуется повторный рендеринг. Если же компоненту нужно обновиться, а этот метод вернул ​ false​— это приведёт к появлению ошибок, с которыми будет сложно бороться.
