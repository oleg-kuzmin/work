//# new Date()
/*
- Date — класс для работы со временем. В основном используется для отображения и вычисления.

Время отображается в двух форматах:
1) UTC — время по Гринвичу
2) В текущей часовой зоне (например, UTC+3 для Москвы)

- Поэтому часть методов для взаимодействия со временем имеют два формата — для UTC и для текущей часовой зоны.
- Класс Date используется для отображения даты в различных форматах. Там, где нужно находить разницу между датами, Date тоже прекрасно справится.

- Date имеет интересное свойство: этот класс автоматически исправляет некорректно введённые значения. Например, при попытке установки 32 декабря, Date прибавит 1 день к максимальному корректному значению (31 декабря) и установит корректную дату.
- С минусом тоже сработает. Только Date будет вычитать значение.
- Также можно установить нулевое значение там, где Date возвращает ненулевые значения. Например, для дня месяца. Тогда класс просто вычтет 1 день.
*/

//# значения
//* new Date()
// создаёт экземпляр Date с текущей датой и временем.
const currentDate1 = new Date();

//* new Date(значение)
// создаёт Date с переданным значением времени. Значение должно быть в формате, который распознается методом Date.parse(), то есть быть совместимым с IETF RFC 2822 (https://www.rfc-editor.org/rfc/rfc2822#page-14) или с ISO8601 (https://es5.javascript.ru/x15.9.html#x15.9.1.15).
const currentDate2 = new Date('August 14, 2022 14:15:30');

//* new Date(год, месяц, день, часы, минуты, секунды, миллисекунды)
// создаёт класс Date в местной часовой зоне. Год и месяц являются обязательными параметрами. Остальные параметры, начиная с часов, будут по умолчанию равны 0, а день — 1.
const currentDate3 = new Date(Date.UTC(2022, 8, 14, 14, 15, 30));

//* new Date(миллисекунды)
// создаёт Date со временем в миллисекундах. Количество миллисекунд измеряется с 1 января 1970 года UTC.
const millisecondsDate = new Date(120000);

//# математические операции
// Математические операции необходимо выполнять со временем в формате UTC. Обычные операции не учитывают летнее время часовых зон, поэтому результаты могут быть некорректны.

//* Найдём количество дней между 1 января 2022 и 31 декабря 2022. Полученное значение = количество дней в году - 1.
const utcDateOne = new Date(Date.UTC(2022, 0, 1, 0, 0, 0));
const utcDateTwo = new Date(Date.UTC(2022, 11, 31, 0, 0, 0));

console.log(utcDateOne.toUTCString()); // Sat, 01 Jan 2022 00:00:00 GMT
console.log(utcDateTwo.toUTCString()); // Sat, 31 Dec 2022 00:00:00 GMT
const result = utcDateTwo - utcDateOne;
console.log(result); // 31449600000 миллисекунд
console.log(result / (1000 * 60 * 60 * 24)); // 364
