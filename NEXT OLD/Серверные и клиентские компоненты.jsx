//# Серверные компоненты
/*
- По умолчанию любая страница созданная в next является серверным компонентом.
- Серверные компоненты могут быть асинхронными.
- Плюсы серверного компонента в том, что на фронтенд не поставляется лишний js, даже в динамически создаваемой странице можно отдать просто статичный html, без какого-либо js.
- Минусы серверного компонента - не используют хуки, состояние, методы жизненного цикла.

Правила вложения
- нельзя импортировать серверный компонент внутри клиентского
- можно пробрасывать серверные компоненты в клиентские как children или любые props

Используйте клиентские компоненты когда:
- необходимо использовать хуки
- когда необходимы обработчики событий на пользовательские действия
- при использовании браузерного API
- когда используется классовый компонент

Используйте серверные компоненты, когда:
- вы получаете данные через серверное API
- когда нужен прямой доступ к ресурсам бэкенда
- когда используется sensetive информация (ключи API, токены и пр.)
- когда используются тяжелые зависимости
*/

//* Создание клиентского компонента (написать в начале файла)
'use client';

//# Стратегии рендеринга
//*SSG - static site generation (создание страницы в процессе build)
/*
- Генерация HTML страниц на сервере
- Рендеринг в процессе билда
- Каждая статическая страница не требует последующей гидрации
- В next.js требует отдельной настройки
*/

//*SSR - server side rendering
/*
- Сервер рендерит HTML-страницу при первом запросе пользователя
- На клиент в HTML "встраивается" JS (hydration)
- При переходе между страницами - аналог CSR
- Индексируется поисковиками
- Подход Next.js с директорией page
*/

//*CSR - client side rendering
/*
- Типичен для SPA-приложений
- Весь рендеринг происходит на клиенте
- С клиента идет запрос на получение динамических данных
- Сервер поставляет одну или несколько пустых нод, которые наполняются динамически
- Не индексируется поисковиками
*/

//*RSC - react server components
/*
- Способ рендерить содержимое на сервере и стримить кусочками его на клиент без последующей гидрации
- Стримит HTML-статику не только при первом запросе, но и дальнейшей навигации
- Индексируется поисковиками
- Подход Next.js с директорией app
*/

//*ISR - incremental static regeneration
/*
- Позволяет перерендерить отдельные страницы
- Комбинация подходов SSG и SSR/RSC
- Обновление может быть запущено по таймеру или событию
*/

