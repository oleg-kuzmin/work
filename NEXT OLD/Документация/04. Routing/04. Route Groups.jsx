//# Группы маршрутов
// В каталоге app вложенные папки обычно сопоставляются с URL-путями. Однако вы можете пометить папку как группу маршрутов, чтобы предотвратить включение этой папки в URL-адрес маршрута.

// Это позволяет вам организовывать сегменты маршрутов и файлы проектов в логические группы, не затрагивая структуру URL-путей.

/*
Группы маршрутов полезны для:
- Организация маршрутов в группы, например. по разделу сайта, намерению или команде.
- Включение вложенных макетов на одном уровне сегмента маршрута:
  - Создание нескольких вложенных макетов в одном сегменте, включая несколько корневых макетов.
  - Добавление макета к подмножеству маршрутов в общем сегменте
*/

//# Соглашение
// Группу маршрутов можно создать, заключив имя папки в круглые скобки: (folderName)

//# Примеры
// Организуйте маршруты, не затрагивая путь URL-адреса.

// Чтобы организовать маршруты, не затрагивая URL-адрес, создайте группу, чтобы хранить связанные маршруты вместе. Папки в скобках не будут включены в URL-адрес (например (marketing) или (shop)).

/*
app
  layout.js
  (marketing)
    about        => /about
      page.js
    blog         => /blog
      page.js
  (shop)
    account      => /account
      page.js
*/

// Несмотря на то, что маршруты внутри (marketing) и (shop) имеют одну и ту же иерархию URL-адресов, вы можете создать разные макеты для каждой группы, добавив файл layout.js в их папки.

/*
app
  layout.js
  (marketing)
    layout.js
  (shop)
    layout.js
*/

//# Выбор определенных сегментов в макете
// Чтобы включить в макет определенные маршруты, создайте новую группу маршрутов (например (shop)) и переместите в группу маршруты, имеющие один и тот же макет (например account и cart). Маршруты за пределами группы не будут иметь общий макет (например checkout).

/*
app
  layout.js
  (shop)
    layout.js
    account      => /account
      page.js
    cart         => /cart
      page.js
  checkout       => /checkout
    page.js
*/

//# Создание нескольких корневых макетов
// Чтобы создать несколько корневых макетов, удалите файл layout.js верхнего уровня и добавьте файл layout.js внутри каждой группы маршрутов. Это полезно для разделения приложения на разделы, которые имеют совершенно разные пользовательский интерфейс или возможности. Теги <html> и <body> необходимо добавить в каждый корневой макет.

/*
app
  (marketing)
    layout.js
  (shop)
    layout.js
*/

// В приведенном выше примере и (marketing) и (shop) имеют собственный корневой макет.

/*
Хорошо знать:
- Именование групп маршрутов не имеет особого значения, кроме организационного. Они не влияют на путь URL.
- Маршруты, включающие группу маршрутов, не должны разрешаться по тому же URL-пути, что и другие маршруты. Например, поскольку группы маршрутов не влияют на структуру URL-адресов, (marketing)/about/page.js и (shop)/about/page.js оба будут разрешаться в /about и вызывать ошибку.
- Если вы используете несколько корневых макетов без файла layout.js верхнего уровня, файл page.js должен быть определен в одной из групп маршрутов, например: app/(marketing)/page.js.
- Навигация по нескольким корневым макетам приведет к полной загрузке страницы (в отличие от навигации на стороне клиента). Например, переход от /cart, который использует app/(shop)/layout.js, к /blog, который использует app/(marketing)/layout.js, приведет к полной загрузке страницы. Это применимо только к нескольким корневым макетам.
*/
