//# Как продолжить изучение React
/* Вы только что познакомились с тремя основными концепциями React: компоненты , реквизит и состояние . Имея прочную основу, вы сможете приступить к созданию приложений React. Как только вы почувствуете себя более уверенно, ознакомьтесь также с другими темами по React:

Как React обрабатывает рендеринг (https://beta.reactjs.org/learn/render-and-commit)
Как использовать ссылки (https://beta.reactjs.org/learn/referencing-values-with-refs)
Как управлять состоянием (https://beta.reactjs.org/learn/managing-state)
Как использовать контекст для глубоко вложенных данных (https://beta.reactjs.org/learn/passing-data-deeply-with-context)
Как использовать перехватчики React API, такие как useEffect() (https://beta.reactjs.org/reference)
*/

//# Ресурсы
// За прошедшие годы было создано множество курсов, видеороликов и статей, которые помогут разработчикам изучить React. Хотя трудно порекомендовать ресурсы, которые будут соответствовать вашему стилю обучения, одним из бесценных справочных материалов является документация React , содержащая интерактивные песочницы, которые помогут вам попрактиковаться в изучении тем.

// Когда дело доходит до изучения React, лучший способ научиться — это создавать. Вы можете постепенно внедрить React, используя <script>полученные ранее знания для добавления небольших компонентов на существующий веб-сайт. Тем не менее, многие разработчики обнаружили, что опыт пользователей и разработчиков React позволяет сразу погрузиться в работу и написать весь свой фронтенд-проект на React.

//# От React к Next.js
// Хотя React преуспевает в создании пользовательского интерфейса, требуется некоторая работа, чтобы самостоятельно превратить этот пользовательский интерфейс в полнофункциональное масштабируемое приложение. Хорошей новостью является то, что Next.js берет на себя большую часть установки и настройки и имеет дополнительные функции, которые помогут вам создавать приложения React.

// Далее мы перенесем пример из React в Next.js, обсудим, как работает Next.js, и представим некоторые концепции веб-разработки, которые помогут вам изучить более продвинутые функции Next.js.
