//# Две формы предварительного рендеринга
// В Next.js есть две формы предварительного рендеринга: статическая генерация и рендеринг на стороне сервера. Разница заключается в том, когда он генерирует HTML для страницы.

// Статическая генерация — это метод предварительной отрисовки, который генерирует HTML во время сборки. Предварительно обработанный HTML затем повторно используется при каждом запросе.

// Серверный рендеринг — это метод предварительной рендеринга, который генерирует HTML-код при каждом запросе.

// В режиме разработки (когда вы запускаете npm run dev или yarn dev) страницы предварительно обрабатываются при каждом запросе. Это также относится и к статической генерации, чтобы упростить разработку. При запуске в производство статическая генерация будет происходить один раз, во время сборки, а не при каждом запросе.

//# Постраничная основа
// Важно отметить, что Next.js позволяет вам выбирать, какую форму предварительного рендеринга использовать для каждой страницы. Вы можете создать «гибридное» приложение Next.js, используя статическую генерацию для большинства страниц и серверную рендеринг для других.

// Когда использовать статическую генерацию или рендеринг на стороне сервера.

// Мы рекомендуем использовать статическую генерацию (с данными и без них), когда это возможно, потому что ваша страница может быть создана один раз и обслуживаться CDN, что делает ее намного быстрее, чем когда сервер обрабатывает страницу при каждом запросе.

/*
Вы можете использовать статическую генерацию для многих типов страниц, в том числе:
- Маркетинговые страницы
- Сообщения в блоге
- Списки продуктов электронной коммерции
- Помощь и документация
*/

// Вам следует спросить себя: «Могу ли я выполнить предварительную отрисовку этой страницы до запроса пользователя?» Если ответ положительный, то вам следует выбрать Static Generation.

// С другой стороны, статическая генерация не является хорошей идеей, если вы не можете предварительно отобразить страницу до запроса пользователя. Возможно, на вашей странице отображаются часто обновляемые данные, а содержимое страницы меняется при каждом запросе.

// В этом случае вы можете использовать рендеринг на стороне сервера. Это будет медленнее, но предварительно обработанная страница всегда будет актуальной. Или вы можете пропустить предварительную отрисовку и использовать клиентский JavaScript для заполнения часто обновляемых данных.

//# Мы сосредоточимся на статической генерации
// В этом уроке мы сосредоточимся на статической генерации. На следующей странице мы поговорим о статической генерации с данными и без них.
