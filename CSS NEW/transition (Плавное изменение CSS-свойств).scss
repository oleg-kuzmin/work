//# transition (Плавное изменение CSS-свойств)
/* Шорткат - transition-property (обязательно), transition-duration (обязательно), transition-timing-function, transition-delay
- Обратите внимание, что свойство transition лучше задавать в стилях для базового состояния. Таким образом, мы заранее говорим браузеру, какое свойство должно изменяться плавно.
- С помощью transition можно плавно изменять любое свойство, у которого значение записывается с помощью чисел (например, margin). Исключения: visibility, z-index.
- По возможности старайтесь не использовать слово all для описания перехода (transition: all .3s). Да, это проще на первоначальном этапе, но позже из-за этого в какой-то момент могут начать плавно изменяться свойства, которые не должны этого делать. Ну и вообще, когда браузер встречает слово all, он начинает перебирать каждое свойство элемента в поисках необходимого. Это ненужная нагрузка.
- Старайтесь использовать для анимации в первую очередь свойства transform и opacity — они самые производительные, потому что не приводят к перезапуску процессов Layout и Paint. Изменяйте свойства left, top, margin, padding, width, height и прочие с осторожностью, только когда без этого никак не обойтись.
- Вторым состоянием необязательно должно быть состояние при наведении. Это может быть состояние :focus, :active, :checked или, например, появление дополнительного класса.
- Мы можем настроить transition таким образом, что при изменении состояния переход будет выполняться с одной скоростью, а при обратном изменении состояния — с другой. Обратите внимание, в этом случае свойство transition задаётся для обоих состояний.
- Длительность перехода может задаваться в секундах (0.3s) или в миллисекундах (300ms). Ноль перед точкой можно не писать (.3s). */

//# значения
.element {
  //* порядок записи: transition-property | transition-duration
  transition: transform 4s;

  //* порядок записи: transition-property | transition-duration | transition-delay
  transition: transform 4s 1s;

  //* порядок записи: transition-property | transition-duration | transition-timing-function | transition-delay
  transition: transform 4s ease-in-out 1s;

  //* два свойства
  transition: transform 4s, color 1s;

  //* все свойства
  transition: all 0.5s ease-out;
}

//# transition-property
// указываем свойство, которое хотим плавно изменить
.element {
  transition-property: background-color; // одно свойство
  transition-property: background-color, color; // два свойства
  transition-property: all; // все свойства
}

//# transition-duration
// длительность перехода (одно или несколько значений времени в секундах или миллисекундах)
.element {
  transition-duration: 1s; // время в секундах
  transition-duration: 120ms; // время в миллисекундах
  transition-duration: 0.1s, 15s; // несколько времён в секундах
  transition-duration: 10s, 30s, 230ms; // несколько времён в секундах и миллисекундах
}

//# transition-timing-function
// функция, описывающая скорость изменения свойства
.element {
  //* ключевые слова
  transition-timing-function: ease; // непринуждённо (по умолчанию)
  transition-timing-function: linear; // линейно
  transition-timing-function: ease-in; // осторожно
  transition-timing-function: ease-out; // отпустить
  transition-timing-function: ease-in-out; // сначала осторожно, потом отпустить

  //* несколько значений
  transition-timing-function: ease, step-start; // несколько значений

  //* steps
  // Изменять свойство можно не плавно, а скачками. Функция steps описывает, за сколько шагов должно произойти изменение свойства.
  // Первый параметр указывает количество шагов, за которое будет изменено свойство. При этом каждый шаг будет отображаться равное количество времени.
  // Второй параметр определяет логику, по которой будет разделён промежуток на отрезки.

  transition-timing-function: steps(4, jump-start);
  // на 20%, 40%, 60%, 80% и 100%. В момент старта анимации текущее значение сразу прыгнет на 20% и там задержится на $1/5$ времени.
  transition-timing-function: steps(10, jump-end);
  // на 0%, 20%, 40%, 60% и 80%. Текущее значение начинает задержку сразу на 0%
  transition-timing-function: steps(5, jump-both);
  // сделает 5 остановок в промежутке между 0% и 100% (16%, 33%, 50%, 66%, 84%)
  transition-timing-function: steps(20, jump-none);
  // сделает 5 остановок, включая 0% и 100% (0%, 25%, 50%, 75%, 100%)
  transition-timing-function: step-start;
  // аналогично записи steps(1, jump-start)
  transition-timing-function: step-end;
  // аналогично записи steps(1, jump-end)

  //* кривая Безье http://cubic-bezier.com
  transition-timing-function: cubic-bezier(1, 0.2, 0.52, 0.46); // кривая Безье: http://cubic-bezier.com
}

//# transition-delay
// задержка перед началом изменения (одно или несколько значений времени в секундах или миллисекундах)
.element {
  transition-delay: 1s; // время в секундах
  transition-delay: 120ms; // время в миллисекундах
  transition-delay: 0.1s, 15s; // несколько времён в секундах
  transition-delay: 10s, 30s, 230ms; // несколько времён в секундах и миллисекундах
}
