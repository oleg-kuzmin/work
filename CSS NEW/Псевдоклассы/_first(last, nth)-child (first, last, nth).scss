//# -CHILD
// При помощи этих псевдоклассов можно удобно выбирать элементы по их порядковому номеру внутри родительского элемента.

// :only-child — выбирает любой элемент, который является единственным дочерним элементом своего родителя.
// :first-child — выбирает первый дочерний элемент в родителе.
// :last-child — выбирает последний дочерний элемент в родителе.
// :nth-child(odd) — выбирает нечётные элементы внутри родителя, подходящие под левую часть селектора.
// :nth-child(even) — выбирает чётные элементы внутри родителя, подходящие под левую часть селектора.
// :nth-child(n-число) — выберет n-й дочерний элемент, подходящий под левую часть селектора.
// :nth-last-child(n-число) — выберет n-й дочерний элемент, подходящий под левую часть селектора (с отсчётом «с конца»)
// :nth-child(3n) — выберет каждый третий элемент внутри родителя

//# ПРИМЕР
.list-item:first-child {
  background-color: #286c2d;
}
.list-item:last-child {
  background-color: #ff8630;
}
.list-item:nth-child(2) {
  background-color: #41e847;
}
.list-item:nth-last-child(2) {
  background-color: #f498ad;
}

//# ОБЩАЯ ИНФОРМАЦИЯ
/* Всё становится гораздо интереснее, когда мы хотим выбрать, к примеру, каждый третий элемент внутри родителя. Используем для этого формулу :nth-child(3n). Вместо n будет подставляться 0, затем 1, 2 и так далее. В результате умножения в скобки будет подставляться 0, 3, 6, 9, и так до тех пор, пока не закончатся дочерние элементы внутри родителя.
- Пойдём дальше и попробуем выбрать каждый шестой элемент, начиная с десятого. Тут нам к умножению на n нужно будет прибавить ещё 10, чтобы отсчёт начался не с 0, а с 10: nth-child(6n+10).*/

//# шпаргалка
// 1	1	Первый элемент, является синонимом псевдокласса :first-child
// 5	5	Пятый элемент
// 2n	2, 4, 6, 8, 10,…	Все чётные элементы, аналог значения even
// 2n+1	1, 3, 5, 7, 9,…	Все нечётные элементы, аналог значения odd
// 3n	3, 6, 9, 12, 15,…	Каждый третий элемент
// 3n+2	2, 5, 8, 11, 14,…	Каждый третий элемент, начиная со второго
// n+4	4, 5, 6, 7, 8,…	Все элементы, кроме первых трёх
// -n+3	3, 2, 1	Первые три элемента
// 5n-2	3, 8, 13, 18, 23,…	—
// even	2, 4, 6, 8, 10,…	Все чётные элементы
// odd	1, 3, 5, 7, 9,…	Все нечётные элементы
