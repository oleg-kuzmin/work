//# array.sort() (СОРТИРУЕТ МАССИВ, МУТАЦИЯ)
// Метод sort, если не передавать ему аргументы, пытается сортировать элементы массива по возрастанию этих кодов.

//# Синтаксис
//* Без аргументов
array.sort();

//* Колбэк-функция
array.sort(function (a, b) {});
/* Принимает на вход колбэк, в котором описана логика сортировки элементов.

- Колбэк принимает на вход два аргумента — два элемента массива, которые предстоит сравнивать.
- Способ сравнения нужно описать в колбэке.
- Метод sort расставляет элементы исходя из значения, которое возвращает колбэк.

Есть ограничение: колбэк обязан возвращать число. Оно может быть:
1) Меньше нуля — первый элемент, переданный как аргумент колбэка, встанет в массиве раньше второго.
2) Больше нуля — наоборот, второй элемент окажется раньше первого.
3) Равно нулю — порядок не изменится, элементы будут стоять как в исходном массиве.
*/

//# Пример
//* с аргументами (2 элемента, нужно вернуть число '-1' '0' '1')
const myNumbers2 = [0, 3.14, 2.718, 13];
myNumbers.sort(function (a, b) {
  return a - b;
  /* Если a меньше b, вернётся отрицательное число.
  Это значит, что a должно расположиться в итоговом массиве
  раньше, b — позже. Например:
    a = 0, b = 3.14
    a - b = -3.14
  Получили отрицательное число, значит a стоит раньше b */
});
console.log(myNumbers); // [0, 2.718, 3.14, 13]

//* с аргументами (2 элемента, нужно вернуть число '-1' '0' '1')
// Диагнозы записаны в том порядке, в каком поступили пациенты. Отсортируем его по алфавиту.
const diagnoses = ['мизофобия', 'синдром упущенной выгоды', 'боязнь красного цвета'];

diagnoses.sort(function (a, b) {
  a = a.toLowerCase(); // приведём строки к нижнему регистру, чтобы сравнение прошло корректно
  b = b.toLowerCase(); // приведём строки к нижнему регистру, чтобы сравнение прошло корректно
  if (a < b) return -1; // a расположится раньше b
  if (b < a) return 1; // b расположится раньше a
  return 0;
});

console.log(diagnoses); // ["боязнь красного цвета", "мизофобия", "синдром упущенной выгоды"]
