//# document.cookie (КУКИ)
/*
- При разработке сайтов часть информации (например, токен авторизации или данные пользователя) нужно хранить и читать как в браузере, так и на сервере. Для этого используют Cookie (произносится «куки»).
- Куки передаются в виде HTTP-заголовка, это накладывает на них ограничения. Например, максимальный размер куки в 4096 байт или отсутствие в содержимом пробелов или запятых. Чтобы обезопасить содержимое, можно закодировать его с помощью функции encodeURIComponent().
- Все куки хранятся в свойстве document.cookie. Это свойство представляет собой строку в формате имя=значение, где пары имён и значений разделяются знаком ";". При этом взаимодействие с полем весьма необычное — если присвоить document.cookie новое значение, то оно не заменит полностью старую строку, а добавит или изменит значение по ключу.
- Есть куки, которые нельзя прочитать или записать из JavaScript. Если сервер устанавливает куки с параметром HttpOnly (доступен только для установки сервером), то такие куки будут недоступны в document.cookie. Как правило, такие куки используются для хранения чувствительной информации, как, например, токены для авторизации. Проверка авторизации происходит с помощью запроса с текущим авторизованным пользователем и считается при успешном ответе сервера.
*/

//# Запись
// Запись в cookie работает с помощью присвоения значения новой куки в поле document.cookie. За один раз можно записать лишь одно значение.

//* Вот так можно добавить значение 1 по ключу counter:
document.cookie = 'counter=1';
console.log(document.cookie); // counter=1

//* При присвоении свойству куки с другим именем, получим два записанных значения:
document.cookie = 'sidebar=false';
console.log(document.cookie); // counter=1; sidebar=false;

//* При повторной записи в то же поле другого значения оно будет перезаписано.
document.cookie = 'sidebar=true';
console.log(document.cookie); // counter=1; sidebar=true;

/*
При установке кук можно указывать не только её название и значение, но и другие параметры. Все они являются необязательными и разделяются точкой с запятой:

1. path – определяет путь, по которому будет доступна кука. Он должен быть абсолютным, то есть начинаться с /. Если параметр не передан, то кука будет доступна на всех страницах сайта.

2. domain - определяет домен, для которого указана кука. Если не указано, то будет использоваться текущий домен.

3. max-age и expires - определяет время жизни куки. max-age указывает, через сколько секунд, а expires указывает точное время, когда кука станет недействительна. Время для expires можно отформатировать с помощью встроенного метода даты Date.toUTCString()

4. secure - указывает, что данная кука может быть передана только при запросах по защищённому протоколу HTTPS.

5. samesite - определяет, может ли данная кука быть отправлена при кросс-доменном запросе. Значение параметра strict будет предотвращать отправку на другие домены, а lax разрешит отправлять куки с GET-запросами.

- Для установки куки, которая будет доступна на текущем домене и всех его поддоменах, используйте название текущего домена и поставьте точку в начале – .${window.location.hostname}
*/

//* Запись куки с разрешением передавать её только по HTTPS и только для текущего домена, со временем жизни в 1 час будет выглядеть так:
document.cookie = 'sidebar=true;secure;samesite=strict;max-age=3600';

//# Чтение
//* Для получения значений, записанных в куки, можно просто вывести содержимое document.cookie:
console.log(document.cookie); // counter=1; sidebar=true;

//* Чтобы получить значение конкретной куки, нам нужно будет прочитать строки и разобрать её по значениям.
function getCookie() {
  return document.cookie.split('; ').reduce((acc, item) => {
    const [name, value] = item.split('=');
    acc[name] = value;
    return acc;
  }, {});
}

const cookie = getCookie();
console.log(cookie.counter); // 1
console.log(cookie.sidebar); // true

//# Удаление
/*
- Для кук не предусмотрено специального метода удаления, поэтому для этого используется трюк с установкой кук с параметром expires который указывает на дату в прошлом. Браузер сразу же считает такую куку устаревшей и удаляет её:
- В этом примере, передав число 0 в конструктор Date мы получаем время на начало эпохи Unix, а именно 1 января 1970 г. Поскольку эта дата из прошлого, то кука будет удалена моментально.
*/

document.cookie = `sidebar=;expires=${new Date(0)}`;

