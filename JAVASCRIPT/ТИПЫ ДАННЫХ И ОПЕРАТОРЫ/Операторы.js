//# Приоритет операторов
/*
- https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
- Все операторы возвращают значение.
- Арифметические операторы (кроме бинарного плюса) работают только с числами и всегда преобразуют операнды в числа.
*/

//# Скобки
//*18  ()     (скобки)

//# Инкремент/декремент
//*15  ++     (постфиксный инкремент) (увеличивает переменную на 1, возвращает старое значение)
//*15  --     (постфиксный декремент) (уменьшает переменную на 1, возвращает старое значение)
//*14  ++     (префиксный инкремент)  (увеличивает переменную на 1, возвращает новое значение)
//*14  --     (префиксный декремент)  (уменьшает переменную на 1, возвращает новое значение)

//# Унарные
//*14	 +      (унарный плюс) (преобразует нечисловые значения в число)
//*14	 -      (унарный минус)	(меняет знак числа на противоположный)

//# Логические
//*14  !      (логическое НЕ)
/*
- Логическое НЕ делает из условия обратное: превращает true в false и наоборот.
- Если поставить ! перед небулевым значением, движок JS сначала приведёт тип к булю, а затем изменит значение на противоположное.
- Двойное отрицание !! сработает как перевод значения в логический тип.

1. Сначала приводит аргумент к логическому типу true/false.
2. Затем возвращает противоположное значение.
*/

//# Математические
//*13	 **     (возведение в степень)
//*12	 *      (умножение)
//*12	 /      (деление)
//*12  %      (остаток от целочисленного деления)
//*11	 +      (бинарный плюс - сложение, при наличии строки прозводит конкатенацию строк)
//*11	 -      (бинарный минус - вычитание)

//# Сравнения
/*
- При сравнении значений разных типов JavaScript приводит каждое из них к числу.
- Cтроки сравниваются посимвольно. Первые символы меньше вторых.
*/

//*9   <      (меньше)
//*9   <=     (меньше или равно)
//*9   >      (больше)
//*9   >=     (больше или равно)
//*8   ==     (равенство)
//*8   !=     (неравенство)
//*8   ===    (строгое равенство - проверяет равенство без приведения типов)
//*8   !==    (строгое неравенство - проверяет равенство без приведения типов)

//* null == undefined // true
// (при нестрогом сравнении значения null и undefined равны друг другу и не равны никаким другим значениям)
//* NaN === NaN // false
// (Not a Number не является числом, поэтому не равен ничему)

//# Логические
// Если значение не логического типа, то оно к нему приводится в целях вычислений.

//*4 value1 && value2 (логическое И - возвращает первое ложное значение или последнее)
/*
- Вернёт истину, когда все булевы переменные истинны.
1. Оператор && идёт по простым условиям слева направо и проверяет каждое.
2. Приводит каждый аргумент к логическому типу true/false. Когда он встречает ложное значение, то останавливается и возвращает его как результат всего условия.
3. Если все операнды являются true - возвращает последний из них.
*/

//*3 value1 || value2 (логическое ИЛИ - возвращает первое истинное значение или последнее)
/*
- Вернёт истину, когда хотя бы одно из булевых переменных истинно.
1. Оператор || идёт по простым условиям слева направо и проверяет каждое.
2. Приводит каждый аргумент к логическому типу true/false. Когда он встречает правдивое значение, то останавливается и возвращает его как результат всего условия.
3. Если все операнды являются false - возвращает последний из них.
*/

//*3 value1 ?? value2 (оператор нулевого слияния - возвращает первый операнд если он не null/undefined или последний)
// Запрещено использовать вместе с || или && без явно указанного приоритета, то есть без скобок.

//# Присваивание
// Присваивание также возвращает значение.
//*2	 =              (присваивание)
//*2	 +=             (присваивание с сложением)
//*2	 -=             (присваивание с вычитанием)
//*2	 *=             (присваивание с умножением)
//*2	 /=             (присваивание с делением)
//*2	 **=            (присваивание с возведением в степень)
//*2   value &&= 10   (присваивание с логическим И - присваивает значение только если value true)
//*2   value ||= 10   (присваивание с логическим ИЛИ - присваивает значение только если value false)
//*2   value ??= 10   (присваивание c нулевым слиянием - присваивает значение только если value null/undefined)

//# Запятая
//*1   ,      (запятая - предоставляет возможность вычислять несколько выражений, возвращает результат последнего)
