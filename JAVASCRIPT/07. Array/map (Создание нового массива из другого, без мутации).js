//# .map() (Создание нового массива из другого, без мутации)
/*
- Метод map создаёт новый массив на основе существующего.
- В качестве аргумента map, как и forEach, принимает функцию.
- Эта функция должна вернуть значение, которое станет элементом нового массива.
- Результат работы функции — то, что указано после ключевого слова return.
- Если не прописать return, функция сработает, но вернёт undefined.
- Метод map нельзя применить к массивоподобным объектам.

Аргументы колбек-функции:
//* 1. Текущий элемент массива
Текущий элемент массива используется часто, поэтому и стоит на первом месте. Если другие аргументы не нужны, достаточно прописать его.

//* 2. Индекс текущего элемента
Второй аргумент колбэка — фактически счётчик цикла for. Его можно использовать, например, для расстановки позиций в списке.

//* 3. Исходный массив
Исходный массив как аргумент пригодится, когда нужно обратиться к свойствам этого исходного массива.
*/

//# Синтаксис
array.map(function (item, index, array) {});

//# пример
const firstArr = [0, 1, 2, 3, 4];
const secondArr = firstArr.map(function (item) {
  return item * item;
});

console.log(secondArr); // [0, 1, 4, 9, 16]

const counterIndexed = counter.map(function (item, index) {
  return `${index + 1}. ${item}`;
});

const ivansIndexed = ivans.map(function (item, index, array) {
  const currentIndex = `(${index + 1} из ${array.length})`;
  return `${item} ${currentIndex}`;
});
