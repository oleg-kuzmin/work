//# Функции
/*
- Если функцию передают как аргумент, её называют «колбэком».
- Если мы используем Function Declaration, то JavaScript перенесёт функции вверх текущей области видимости. Это называется «поднятие» (или hoisting).
- На практике это означает, что мы можем использовать Function Declaration до своего же объявления. Пишем — заработай, и где-то потом объясняем как.
- Обычно имя функции пишут стилем camelCase и используют в начале глагол. Отвечает на вопрос: что делает эта функция?.
- Как и массивы, функции в JavaScript — это объекты с дополнительными методами.
- Но при показе кода функции в консоли выводится только код функции.
*/

//# 1. function declaration (декларация)
//* может принимать аргументы
function showMessage(user, message) {
  console.log(user + ': ' + message);
}

//* использование параметра по умолчанию
// Параметр по умолчанию может принимать любое значение: число, строку, объект, функцию. Это значение будет присвоено параметру, если аргумент не передан или равен undefined. Значением одного параметра функции даже может быть другой её параметр.
function showMessage(from, text = 'текст не добавлен') {
  console.log(from + ': ' + text);
}
function showMessage(from, text = anotherFunction()) {
  console.log(from + ': ' + text);
}

//* рекурсивные функции (внутри функции вызывает сама себя)
function fac(n) {
  if (n < 2) {
    return 1;
  } else {
    return n * fac(n - 1);
  }
}
console.log(fac(3));

//# 2. function expression (функциональное выражение)
const hello = function (name) {
  console.log(`Привет ${name}`);
};

//# 3. Стрелочные функции (функциональное выражение)
// Стрелочными могут быть только функциональные выражения.

//* несколько параметров
const boatDeparture = (eater, food) => {
  console.log(`через речку в лодке поплывут ${eater} и ${food}`);
};
boatDeparture('козёл', 'капуста');

//* использование параметра по умолчанию
const showMessage = (from, text = 'текст не добавлен') => console.log(from + ': ' + text);

//* без параметров
const sayHi = () => alert('Привет');

//* короткая запись параметров
// Если у стрелочной функции один параметр, можно не заключать его в скобки
const boatArrival = survivor => {
  console.log(`до другого берега доберётся только ${survivor}`);
};

//* короткий return
// Если директива return — единственное действие в теле стрелочной функции, можно опустить и директиву return, и фигурные скобки
const shorterSingleAnecdote = anecdote => `я знаю только один анекдот: ${anecdote}`;

//* объект
// Если возвращаемое значение — объект, его нужно заключить в круглые скобки. Иначе то, что в фигурных скобках, движок воспримет как тело функции.
const colorHex = () => ({ white: '#FFF' });

//# arguments
/*
- В старом коде, до появления оператора spread, можно встретить другой способ работы с такими функциями — переменную arguments.
- Внутри любой функции, кроме стрелочной, доступна переменная arguments. Она создаётся автоматически. Это псевдомассив всех аргументов, которые были переданы функции.
*/

function gimmeSomeArguments() {
  console.log(arguments);
}
gimmeSomeArguments(1, 2); // [1, 2]
gimmeSomeArguments('a', 'b', 'c', 'd', 'e'); // ['a', 'b', 'c', 'd', 'e']max

function consoleDog() {
  console.log(arguments[0]);
}
consoleDog('Джек Рассел'); // 'Джек Рассел'
