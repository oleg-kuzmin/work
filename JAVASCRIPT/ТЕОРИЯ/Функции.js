//# Функции
/*
- Функция — это блок из различных команд. С ней легко создавать порядок в коде программы, избавляясь от ненужных повторений и запутанных частей.
- При написании функции указываются параметры - те переменные, с которыми работает функция.
- При вызове функции можно передать в нее аргументы.
- Если функцию передают как аргумент, её называют «колбэком».
- Если мы используем Function Declaration, то JavaScript перенесёт функции вверх текущей области видимости. Это называется «поднятие» (или hoisting).
- На практике это означает, что мы можем использовать Function Declaration до своего же объявления. Пишем — заработай, и где-то потом объясняем как.
- Обычно имя функции пишут стилем camelCase и используют в начале глагол. Отвечает на вопрос: что делает эта функция?.
- Переменные внутри функции существуют только внутри этой функции — этот эффект называется областью видимости.
- Как и массивы, функции в JavaScript — это объекты с дополнительными методами.
- Но при показе кода функции в консоли выводится только код функции.
- Если идентификатор создан внутри функции, обратиться к нему снаружи нельзя.
- Если обратиться к идентификатору из функции, движок сначала поищет идентификатор в теле этой функции.
Если не найдёт — начнёт искать снаружи (в другой функции и так до глобальной области видимости)
- Переменную называют глобальной, если она объявлена в глобальной области видимости, и локальной — если внутри функции.
- Если в теле функции обратиться к идентификатору, движок JavaScript сначала ищет его в теле этой функции, и уже потом снаружи. Поэтому если и снаружи, и внутри есть одинаковые идентификаторы, движок остановится на внутреннем, а внешний — проигнорирует.
*/

//# arguments
// Переменная arguments создаётся внутри функции при объявлении и содержит все переданные аргументы. В строгом режим мы не можем менять значения аргументов, обращаясь к ним по индексам.

function consoleDog(dog) {
  console.log(arguments[0]);
}

consoleDog('Джек Рассел'); // "Джек Рассел"

//# function declaration
//* может принимать аргументы
function showMessage(user, message) {
  console.log(user + ': ' + message);
}

//* использование параметра по умолчанию (text = "текст не добавлен")
function showMessage(from, text = 'текст не добавлен') {
  console.log(from + ': ' + text);
}

//* использование в качестве параметра по умолчанию вызов другой функции (text = anotherFunction())
function showMessage(from, text = anotherFunction()) {
  console.log(from + ': ' + text);
  // если параметр text не передан, то выполнится функция anotherFunction()
}

//* рекурсивные функции (внутри функции вызывает сама себя)
function fac(n) {
  if (n < 2) {
    return 1;
  } else {
    return n * fac(n - 1);
  }
}
console.log(fac(3)); // 6

//# function expression
const hello = function (name) {
  console.log(`Привет ${name}`);
};

//# стрелочные функции (нет контекста выполнения)
//* несколько параметров
const boatDeparture = (eater, food) => {
  console.log(`через речку в лодке поплывут ${eater} и ${food}`);
};
boatDeparture('козёл', 'капуста');

//* использование параметра по умолчанию (text = 'текст не добавлен')
const showMessage = (from, text = 'текст не добавлен') => console.log(from + ': ' + text);

//* короткий return
// Если директива return — единственное действие в теле стрелочной функции, можно опустить и директиву return, и фигурные скобки
const shorterSingleAnecdote = anecdote => `я знаю только один анекдот: ${anecdote}`;

// Если возвращаемое значение — объект, его нужно заключить в круглые скобки
const colorHex = () => ({ white: '#FFF' });

//* без параметров
const sayHi = () => alert('Привет');

//* короткая запись параметров
// Если у стрелочной функции один параметр, можно не заключать его в скобки
const boatArrival = survivor => {
  console.log(`до другого берега доберётся только ${survivor}`);
};

//* колбек
const array = [1, 2, 3, 4];
const newArray = array.map(elem => elem * 2);
