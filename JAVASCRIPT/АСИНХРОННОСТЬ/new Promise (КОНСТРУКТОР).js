//# Promise (ОБЪЕКТ ДЛЯ ОБРАБОТКИ АСИНХРОННОГО КОДА)
/*
- Промис (Promise) — специальный объект JavaScript, который используется для написания и обработки асинхронного кода.
- Асинхронные функции возвращают объект Promise в качестве значения. Внутри промиса хранится результат вычисления, которое может быть уже выполнено или выполнится в будущем.

Промис может находиться в одном из трёх состояний:
1. pending — стартовое состояние, операция стартовала;
2. fulfilled — получен результат;
3. rejected — ошибка.

- Поменять состояние можно только один раз: перейти из pending либо в fulfilled, либо в rejected.
- Промис решает задачу выполнения кода, который зависит от результата асинхронной операции.
- Промис устроен таким образом, что рычаги управления его состоянием остаются у асинхронной функции. После создания, промис находится в состоянии ожидания pending. Когда асинхронная операция завершается, функция переводит промис в состояние успеха fulfilled или ошибки rejected.
- С помощью методов then(), catch() и finally() мы можем реагировать на изменение состояния промиса и использовать результат его выполнения.
*/

//# Синтаксис new Promise
new Promise(function (resolve, reject) {});
//* function (resolve, reject) {}
/*
- В конструктор передаётся функция-исполнитель асинхронной операции.
- Она вызывается сразу после создания промиса. Задача этой функции — выполнить асинхронную операцию и перевести состояние промиса в fulfilled (успех) или rejected (ошибка).
- Изменить состояние промиса можно, вызвав колбэки resolve, reject, переданные аргументами в функцию.
*/

//# Синтаксис function (resolve, reject)
//* resolve — колбэк для перевода промиса в состояние fulfilled, при его вызове аргументом передаётся результат операции
//* reject — колбэк для перевода промиса в состояние rejected, при его вызове аргументом передаётся информация об ошибке

//# Пример
const newPromise = new Promise(function (resolve, reject) {
  // будем определять, обработан запрос или нет, случайным образом
  const rand = Math.random() > 0.5 ? true : false;
  if (rand) {
    resolve('Запрос обработан успешно');
  } else {
    reject('Запрос отклонён');
  }
});

const promise = new Promise(function (resolve, reject) {
  const data = getData(); // делаем асинхронную операцию: запрос в БД, API, etc.
  resolve(data); // переводим промис в состояние fulfilled. Результатом выполнения будет объект data
});

const errorPromise = new Promise(function (resolve, reject) {
  reject(new Error('ошибка')); // переводим промис в состояние rejected. Результатом выполнения будет объект Error
});

//# Цепочка методов
let isLoading = true;
fetch(`https://swapi.dev/api/films/${id}/`)
  .then(function (movies) {
    renderList(movies);
  })
  // catch сработает, когда любая из операций ".then" выше завершится ошибкой
  .catch(function (err) {
    renderErrorMessage(err);
  })
  .finally(function () {
    isLoading = false;
  });
