//# Promise.then() (ВЫПОЛНИТСЯ В СЛУЧАЕ FULFILLED)
/*
- Метод then() используют, чтобы выполнить код после успешного выполнения асинхронной операции (изменения состояния промиса).
- Всегда возвращает новый промис.
*/

//# Синтаксис
//* myFunction() - Aсинхронная функция, которая возвращает промис
myFunction().then(
  function (result) {
    console.log(result);
  },
  function (error) {
    console.error(error.message);
  }
);

//* function (result)
// Функция-колбэк, которая будет вызвана при переходе промиса в состояние «успех» fulfilled. Функция имеет один параметр, в который передаётся результат выполнения операции.

//* function (error) (опционально)
// Функция-колбэк, которая будет вызвана при переходе промиса в состояние «ошибка» rejected. Функция имеет один параметр, в который передаётся информация об ошибке. Хорошей практикой считается не использовать второй аргумент метода then() и обрабатывать ошибки при помощи метода catch().

//# Пример
// запросим через API список домов из Игры престолов. Метод `fetch` возвращает промис
fetch('https://www.anapioficeandfire.com/api/houses')
  .then(function (response) {
    // выполнится, когда от API придет ответ
    // запустим асинхронную операцию парсинга JSON из ответа сервера
    return response.json(); // вернем из обработчика промис, к которому добавим then
  })
  .then(function (houses) {
    // выполнится, когда JSON распарсится
    return fetch(houses[0].overlord); // запросим данные о сюзерене этого дома
  })
  .then(function (response) {
    // выполнится, когда от API придет ответ
    return response.json();
  })
  .then(function (overlord) {
    console.log(overlord.name);
  });

//# Пример с методом catch()
/*
- then() в индустрии используется только для обработки успешного завершения операции, в варианте с одним аргументом
- Для обработки ошибок используют метод catch(). Такие цепочки читаются лучше.
*/

getPasswords()
  .then(function (result) {
    console.log(`Все пароли: ${result}`);
  })
  .catch(function (error) {
    console.log(`Ошибка: ${error.message}`);
  });
