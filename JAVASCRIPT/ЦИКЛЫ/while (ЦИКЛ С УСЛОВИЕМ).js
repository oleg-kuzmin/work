//# while (ЦИКЛ С УСЛОВИЕМ)
/*
- Управляющая конструкция, которая создаёт цикл.
- Всегда используйте альтернативы циклу while, которые лучше подходят под задачу. Например, у массивов есть много удобных методов: forEach(), filter(), map(). Они лучше читаются и содержат меньше кода.
- Следите, чтобы условие менялось с каждым выполнением тела цикла. Если этого не происходит, то, скорее всего, цикл будет бесконечным.
- while более гибкий цикл чем for, но при его написании легко совершить ошибку. Момент инициализации и изменения переменных в for (операция инициализации и шага) заранее определены. Их можно нарушить, но это не будет хорошо читаться. while предоставляет полную свободу организовывать цикл как угодно, это полностью ручное управление. Можно легко забыть написать что-либо — чаще всего забывают менять переменную из условия в теле цикла.
*/

//# Синтаксис
while (условие) {
  //тело цикла
}

//* условие
// Тут задаётся условие по которому выполняется цикл. Если условие ложно, работа цикла прекращается и тело цикла не выполняется.

//* тело цикла
// Это блок операций, которые будут выполнены в случае если условие истинно.

//# Пример
const numbers = [1, 2, 3, 4, 5];
let i = 0;
while (i < numbers.length) {
  const currentElement = numbers[i];
  console.log(currentElement * currentElement);
  i++;
}
// напечатает 1, 4, 9, 16, 25

let count = numbers.length;
while (count) {
  // вариант с приведением типов в условии цикла
  console.log(count);
  count--;
}
// напечатает 5, 4, 3, 2, 1

//# break (прерывает выполнение цикла)
// break стараются не использовать, потому что он ведёт себя как второе условие цикла и понижает читаемость. Почти всегда цикл с break можно переписать без этого оператора, изменив условие или добавив дополнительную проверку.

let count2 = 5;
while (count2 > 0) {
  if (count2 === 2) {
    break; // цикл прервётся здесь, оператор break убивает цикл
  }
  console.log(count2); // 5, 4, 3
  count--;
}

//# continue (пропускает текущую итерацию)
// Внутри цикла можно использовать оператор continue, он прерывает текущую итерацию и возвращается к проверке условия. Оператор стараются не использовать, потому что он усложняет чтение кода — появляется ещё одно место, где итерация может завершиться. Почти всегда цикл с continue можно переписать на цикл без него, добавив ветвление if.

let count3 = 5;
while (count3 > 0) {
  count3--;
  if (count3 === 2) {
    continue; // когда count будет равен 2, итерация прервется здесь и не дойдет до печати
  }
  console.log(count3); // напечатает 4, 3, 1, 0
}
