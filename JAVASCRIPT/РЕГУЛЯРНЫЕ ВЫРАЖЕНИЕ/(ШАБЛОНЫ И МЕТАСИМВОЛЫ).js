//# (ШАБЛОНЫ И МЕТАСИМВОЛЫ)
/*
Шаблоны — набор символов, которые используют для поиска определённых сочетаний символов в тексте.
Метасимволы — специальные символы, которые используют для составления шаблонов.

.       (любой одиночный символ (1 символ)
a       (одиночный символ a (1 символ)
a.      (символ a и еще один любой одиночный символ (2 символа)
a..     (символ a и еще два любых одиночных символа (3 символа)
[]      (любой одиночный символ из них, также можно указывать диапазоны)
[aA]    (найдет одиночный символ a и одиночный символ A (не вместе)
[a-z]   (диапазон любой одиночный символ от a до z)
\       (экранирование)
$       (конец строки)
^       (начало строки)
\n      (перенос строки)
[^a]    (отрицание, начинается с любого символа, не равного a)
\d      (любая одиночная цифра (1 символ)
\d\d    (две любые одиночных цифры подряд (2 символа)
\D      (все что угодно кроме цифры)
\s      (любой одиночный пробел)
\S      (все что угодно кроме пробела)
\w      (любая одиночная буква)
\W      (все что угодно кроме букв и цифр)
\b      (граница слова)
\b...\b (слово из 3 букв (3 символа)
\B      (все, кроме границ слова)

//* квантификация
1) {}       (квантификация (сколько символ должен повторятся)
2) a{4}     (выражение из 4 символов a подряд)
3) a{4,6}   (выражение от 4 символов до 6 подряд)
4) *        (выражение повторяется от 0 и выше)
5) ab*      (ищет выражение a и b сколько угодно раз)
6) +        (выражение повторяется от 1 и выше)
7) ab+      (ищет выражение a и b как мининум один раз)
8) ?        (выражение повторяется либо 0 либо 1)

//* условия и группировка
(\s|-) - либо \s либо - (знак |)
*/

//# Квантификаторы
/* Квантификаторы — метасимволы, которые определяют количество повторений предыдущего символа.
1) {n}   (соответствует ровно n повторениям предыдущего символа)
2) {n,m} (соответствует от n до m повторений предыдущего символа)
3) {n,}  (соответствует n или более повторениям предыдущего символа)
4) ?     (делает предыдущий квантификатор ленивым, т. е. соответствует наименьшему возможному количеству повторений)
*/

const pattern = /a{3}/; // соответствует трём символам "a" подряд
