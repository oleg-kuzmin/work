//# outerHTML (ЭЛЕМЕНТ С СОДЕРЖИМЫМ И РАЗМЕТКОЙ)
/*
- Свойство outerHTML позволяет получить элемент и внутреннее HTML-содержимое элемента в виде строки со всем наполнением (в том числе и разметкой).
- Свойство outerHTML позволяет считать содержимое элемента в виде HTML-строки или установить новый HTML, но только во внешнем контексте.
- Свойство outerHTML содержит HTML элемента целиком. Это как innerHTML плюс сам элемент.
- Будьте осторожны: в отличие от innerHTML, запись в outerHTML не изменяет элемент. Вместо этого элемент заменяется целиком во внешнем контексте.
- Использование outerHTML не изменяет DOM-элемент, а удаляет его из внешнего контекста и вставляет вместо него новый HTML-код.
- Здесь легко сделать ошибку: заменить div.outerHTML, а потом продолжить работать с div, как будто там новое содержимое. Но это не так. Подобное верно для innerHTML, но не для outerHTML.
- Мы можем писать в elem.outerHTML, но надо иметь в виду, что это не меняет элемент, в который мы пишем. Вместо этого создаётся новый HTML на его месте. Мы можем получить ссылки на новые элементы, обратившись к DOM.
*/

//# Возвращает
//* Строка с элементом и содержимым.

//# Пример
const form = document.querySelector('form');
console.log(form.outerHTML);
// '<form><label>Логин</label><input type="text" id="login" /><div class="error">Введите логин</div></form>'
form.outerHTML = '<div class="success">Вход выполнен</div>';

//* ДО
<form>
  <label>Логин</label>
  <input type="text" id="login" />
  <div class="error">Введите логин</div>
</form>;

//* ПОСЛЕ
<form>
  <label>Логин</label>
  <input type="text" id="login" />
  <div class="error">Введите логин</div>
</form>;

//* НО ВИЗУАЛЬНО БУДЕТ ВИДНО ДРУГОЕ (КОЛДУНСТВО...)
<form>
  <div class="success">Вход выполнен</div>
</form>;
