//# Spread (Разделение) и Rest (Соединение)
/*
- Оператор разделения объекта на свойства (spread) или оператор соединения свойств в объект (rest).
- Упрощают создание объектов и массивов на основе других объектов и массивов.
- Спред-синтаксис (spread) ... позволяет передавать итерируемые коллекции (например, массивы или строки) как список аргументов функции или добавлять содержащиеся в них элементы в новый массив.

- Спред-синтаксис легче всего изучать на примерах. Есть три контекста, в которых он применяется.
1) При вызове функции

2) При создании массивов с помощью литерала []
При использовании спред-синтаксиса элементы массива копируются только на один уровень вложенности. Если массив содержит объекты, то это будут те же самые объекты, что и в исходном массиве. Для глубокого копирования пользуйтесь библиотеками, например, lodash

3) При создании объекта с помощью литерала {}
Если свойства в новом и старом объекте совпадают, то будет использоваться значение свойства, которое шло последним:
*/

//# При вызове функции использовать значения из массива как аргументы:
function multiplyThreeNumbers(a, b, c) {
  return a * b * c;
}
const numbers = [1, 2, 3]; // Если в массиве будет больше элементов, чем параметров функции, то будут использованы только те элементы, которые идут первыми по порядку:

console.log(multiplyThreeNumbers(...numbers)); // 6

//# В массиве скопировать элементы из другого массива в новый:
const donor = ['это', 'старые', 'значения'];
const newArray = [...donor, 1, true, 'мама'];

console.log(newArray); // ['это', 'старые', 'значения', 1, true, 'мама']

//# У объекта скопировать свойства из другого объекта в новый:
const persona = { name: 'Иван', lastName: 'Объектов' };
const userData = { ...persona, username: 'killer3000' };

console.log(userData); // {name: 'Иван', lastName: 'Объектов', username: 'killer3000'}

//# запрещённые свойства
// Спред на объектах используют в библиотеке React. Программист может передать в функцию объект с произвольными свойствами, но мы хотим запретить устанавливать некоторые из них. В этом случае создаётся новый объект, в который сначала копируются присланные значения, а потом значения «запрещённых» свойств. В этом случае даже если запрещённое свойство было передано, оно будет перезаписано:

function Headline(props) {
  const filteredProps = {...props, ariaHidden: false}
  return createElement('h1', filteredProps, 'Текст заголовка')
}

//# Второе назначение оператора ... - rest-параметры. Cобирают отдельные параметры функции в массив.
//* Внимание: rest-параметр всегда стоит в конце.
function consoleDogs(firstDog, ...otherDogs) {
  console.log(`Первый: ${firstDog}`); // Первый: Спаниель,
  console.log(`Остальные: ${otherDogs}`); // Остальные: ['Овчарка', 'Борзая', 'Метис']
}
consoleDogs('Спаниель', 'Овчарка', 'Борзая', 'Метис');
