//# Поддержание чистоты компонентов
// Некоторые функции JavaScript являются чистыми. Чистые функции выполняют только вычисления и не более того. Строго записывая свои компоненты только как чистые функции, вы можете избежать целого класса непонятных ошибок и непредсказуемого поведения по мере роста вашей кодовой базы. Однако, чтобы получить эти преимущества, необходимо соблюдать несколько правил.

/* Ты выучишь
- Что такое чистота и как она помогает избежать ошибок
- Как сохранить чистоту компонентов, не допуская внесения изменений на этапе рендеринга
- Как использовать строгий режим для поиска ошибок в компонентах
*/

//# Чистота: компоненты в виде формул
/* В информатике (и особенно в мире функционального программирования) чистая функция — это функция со следующими характеристиками:
- Онa занимается своим делом. Онa не изменяет никакие объекты или переменные, существовавшие до ее вызова.
- Те же входы, тот же выход. Учитывая одни и те же входные данные, чистая функция всегда должна возвращать один и тот же результат.
*/

// Возможно, вы уже знакомы с одним примером чистых функций: математическими формулами.

/* Рассмотрим эту математическую формулу: y = 2x.
- Если x = 2, то y = 4. Всегда.
- Если x = 3, то y = 6. Всегда.
- Если x = 3, y иногда не будет равняться 9, –1 или 2,5 в зависимости от времени суток или состояния фондового рынка.
- Если y = 2x и x = 3, y всегда будет равно 6.
*/

// Если бы мы превратили это в функцию JavaScript, это выглядело бы так:
function double(number) {
  return 2 * number;
}

// В приведенном выше примере double — это чистая функция. Если вы передадите ему 3, он вернет 6. Всегда.

// React разработан вокруг этой концепции. React предполагает, что каждый написанный вами компонент — это чистая функция. Это означает, что компоненты React, которые вы пишете, всегда должны возвращать один и тот же JSX при одних и тех же входных данных:

//* App.js
function Recipe({ drinkers }) {
  return (
    <ol>
      <li>Boil {drinkers} cups of water.</li>
      <li>
        Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.
      </li>
      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>
    </ol>
  );
}

function App() {
  return (
    <section>
      <h1>Spiced Chai Recipe</h1>
      <h2>For two</h2>
      <Recipe drinkers={2} />
      <h2>For a gathering</h2>
      <Recipe drinkers={4} />
    </section>
  );
}

// Когда вы передаете Drinkers={2} в Recipe, он возвращает JSX, содержащий 2 стакана воды. Всегда.

// Если вы передадите Drinkers={4}, он вернет JSX, содержащий 4 стакана воды. Всегда.

// Точно так же, как математическая формула.

// Вы можете думать о своих компонентах как о рецептах: если вы будете следовать им и не добавлять новые ингредиенты в процессе приготовления, вы каждый раз будете получать одно и то же блюдо. Это «блюдо» — это JSX, который компонент передает React для рендеринга.

//# Side Effects (Побочные эффекты): непредвиденные последствия
