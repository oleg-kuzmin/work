//# Написание разметки с помощью JSX
// JSX — это расширение синтаксиса JavaScript, которое позволяет писать HTML-разметку внутри файла JavaScript. Хотя существуют и другие способы написания компонентов, большинство разработчиков React предпочитают лаконичность JSX, и большинство баз кода используют его.

/*
Ты выучишь:
- Почему React смешивает разметку с логикой рендеринга
- Чем JSX отличается от HTML
- Как отображать информацию с помощью JSX
*/

//# JSX: размещение разметки в JavaScript
// Сеть построена на HTML, CSS и JavaScript. В течение многих лет веб-разработчики хранили контент в HTML, дизайн в CSS и логику в JavaScript — часто в отдельных файлах! Содержимое было размечено внутри HTML, а логика страницы жила отдельно в JavaScript.

// Но по мере того, как Интернет становился более интерактивным, содержание все больше определялось логикой. JavaScript отвечал за HTML! Вот почему в React логика рендеринга и разметка живут вместе в одном месте — компонентах.

// Совместное использование логики и разметки рендеринга кнопки гарантирует их синхронизацию друг с другом при каждом редактировании. И наоборот, несвязанные детали, такие как разметка кнопки и разметка боковой панели, изолированы друг от друга, что делает более безопасным изменение любой из них самостоятельно.

// Каждый компонент React представляет собой функцию JavaScript, которая может содержать некоторую разметку, которую React отображает в браузере. Компоненты React используют расширение синтаксиса под названием JSX для представления этой разметки. JSX очень похож на HTML, но он более строгий и может отображать динамическую информацию. Лучший способ понять это — преобразовать некоторую разметку HTML в разметку JSX.

//* Примечание
// JSX и React — две разные вещи. Они часто используются вместе, но вы можете использовать их независимо друг от друга. JSX — это расширение синтаксиса, а React — это библиотека JavaScript.
//* Примечание

//# Преобразование HTML в JSX
/* Предположим, что у вас есть (совершенно правильный) HTML:

<h1>Hedy Lamarr's Todos</h1>
<img
  src="https://i.imgur.com/yXOvdOSs.jpg"
  alt="Hedy Lamarr"
  class="photo"
>
<ul>
  <li>Invent new traffic lights
  <li>Rehearse a movie scene
  <li>Improve the spectrum technology
</ul>


И вы хотите поместить это в свой компонент:

export default function TodoList() {
  return (
    ...
  )
}

Если скопировать и вставить как есть, это не сработает:

export default function TodoList() {
  return (
    * This doesn't quite work!
    <h1>Hedy Lamarr's Todos</h1>
    <img
      src="https://i.imgur.com/yXOvdOSs.jpg"
      alt="Hedy Lamarr"
      class="photo"
    >
    <ul>
      <li>Invent new traffic lights
      <li>Rehearse a movie scene
      <li>Improve the spectrum technology
    </ul>
  );
}

Это потому, что JSX строже и имеет несколько больше правил, чем HTML! Если вы прочитаете сообщения об ошибках выше, они помогут вам исправить разметку или вы можете следовать инструкциям ниже.
*/

//* Примечание
// В большинстве случаев сообщения об ошибках React на экране помогут вам найти причину проблемы. Прочитайте их, если вы застряли!
//* Примечание

//# Правила JSX

//# 1. Вернуть один корневой элемент
// Чтобы вернуть несколько элементов из компонента, оберните их одним родительским тегом.

// Например, вы можете использовать <div>:

<div>
  <h1>Hedy Lamarr's Todos</h1>
  <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo" />
  <ul>...</ul>
</div>;

// Если вы не хотите добавлять что-то в разметку <div>, вы можете вместо этого написать <></>:

<>
  <h1>Hedy Lamarr's Todos</h1>
  <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo" />
  <ul>...</ul>
</>;

// Этот пустой тег называется фрагментом. Фрагменты позволяют группировать объекты, не оставляя следов в HTML-дереве браузера.

//* ГЛУБОКОЕ ПОГРУЖЕНИЕ (Почему необходимо обернуть несколько тегов JSX?)
// JSX выглядит как HTML, но внутри он преобразуется в простые объекты JavaScript. Вы не можете вернуть два объекта из функции, не завернув их в массив. Это объясняет, почему вы также не можете вернуть два тега JSX, не завернув их в другой тег или фрагмент.
//* ГЛУБОКОЕ ПОГРУЖЕНИЕ (Почему необходимо обернуть несколько тегов JSX?)

//# 2. Закройте все теги
// JSX требует, чтобы теги были явно закрыты: самозакрывающиеся теги типа <img> должны стать <img />, а теги-оболочки типа <li> должны быть записаны как <li>oranges</li>.

// Вот как изображение и элементы списка Хеди Ламарр выглядят закрытыми:

<>
  <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo" />
  <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve the spectrum technology</li>
  </ul>
</>;

//# 3. В верблюжьем кейсе большинство вещей!
// JSX превращается в JavaScript, а атрибуты, написанные в JSX, становятся ключами объектов JavaScript. В ваших собственных компонентах вам часто потребуется считывать эти атрибуты в переменные. Но в JavaScript есть ограничения на имена переменных. Например, их имена не могут содержать тире или быть зарезервированными словами, такими как class.

// Вот почему в React многие атрибуты HTML и SVG написаны в CamelCase. Например, вместо stroke-widthвы используете strokeWidth. Поскольку class это зарезервированное слово, в React вы пишете className вместо него и имя соответствующего свойства DOM:

<img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" className="photo" />;

// Вы можете найти все эти атрибуты в списке реквизитов компонента DOM. Если вы допустили ошибку, не волнуйтесь — React выведет сообщение с возможным исправлением в консоль браузера.

//! ловушка
// По историческим причинам aria и data-атрибуты пишутся как в HTML с тире.
//! ловушка

//# Совет: используйте JSX-конвертер.
// Преобразование всех этих атрибутов в существующую разметку может быть утомительным! Мы рекомендуем использовать конвертер для перевода существующего HTML и SVG в JSX. Конвертеры очень полезны на практике, но все же стоит понимать, что происходит, чтобы можно было комфортно писать JSX самостоятельно.

// Вот ваш окончательный результат:

function TodoList() {
  return (
    <>
      <h1>Hedy Lamarr's Todos</h1>
      <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" className="photo" />
      <ul>
        <li>Invent new traffic lights</li>
        <li>Rehearse a movie scene</li>
        <li>Improve the spectrum technology</li>
      </ul>
    </>
  );
}

//# Резюме
/*
Теперь вы знаете, почему существует JSX и как его использовать в компонентах:
- Компоненты React группируют логику рендеринга вместе с разметкой, поскольку они связаны.
- JSX похож на HTML, но с некоторыми отличиями. При необходимости вы можете использовать конвертер .
- Сообщения об ошибках часто указывают вам правильное направление для исправления разметки.
*/
