//# Рендеринг (Render) и Commit (Фиксация)
// Прежде чем ваши компоненты будут отображены на экране, они должны быть отрисованы React. Понимание этапов этого процесса поможет вам задуматься о том, как выполняется ваш код, и объяснить его поведение.

/* Вы узнаете
- Что означает рендеринг в React
- Когда и почему React отображает компонент
- Шаги, связанные с отображением компонента на экране
- Почему рендеринг не всегда приводит к обновлению DOM
*/

/* Представьте, что ваши компоненты - это повара на кухне, собирающие вкусные блюда из ингредиентов. В этом сценарии React - это официант, который выполняет запросы клиентов и приносит им их заказы. Этот процесс запроса и подачи пользовательского интерфейса состоит из трех этапов:

1. Тригер рендеринга (доставка заказа гостя на кухню).
2. Рендеринг компонента (подготовка заказа на кухне)
3. Коммит в DOM (размещение заказа на столе)
*/

//# Шаг 1: Запуск рендеринга
/* Есть две причины для рендеринга компонента:
1. Это инициальный рендеринг компонента.
2. Состояние компонента (или одного из его предков) было обновлено.
*/

//# Начальный рендер
// Когда ваше приложение запускается, вам необходимо вызвать начальный рендеринг. Фреймворки и песочницы иногда скрывают этот код, но он выполняется вызовом createRoot с целевым узлом DOM, а затем вызовом его метода render с вашим компонентом:

//* image.js
function Image() {
  return (
    <img
      src="https://i.imgur.com/ZF6s192.jpg"
      alt="'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals"
    />
  );
}

//* index.js
import Image from './Image.js';
import { createRoot } from 'react-dom/client';

const root = createRoot(document.getElementById('root'));
root.render(<Image />);

// Попробуйте закомментировать вызов root.render() и увидите, как компонент исчезнет!

//# Рендеринг при обновлении состояния
// После того, как компонент был первоначально отрисован, вы можете инициировать дальнейшие рендеры, обновляя его состояние с помощью функции set. Обновление состояния компонента автоматически ставит его в очередь на рендер. (Вы можете представить это как посетитель ресторана, который после первого заказа заказывает чай, десерт и всевозможные вещи, в зависимости от состояния его жажды или голода).

//# Шаг 2: React рендерит ваши компоненты