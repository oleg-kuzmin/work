//# Постановка в очередь серии обновлений состояния
// Установка переменной состояния ставит в очередь очередной рендеринг. Но иногда вы можете захотеть выполнить несколько операций над значением перед постановкой в очередь следующего рендера. Для этого необходимо понять, как React выполняет пакетную обработку обновлений состояния.

/* Вы узнаете
- Что такое "пакетная обработка" и как React использует ее для обработки нескольких обновлений состояния
- Как применить несколько обновлений к одной и той же переменной состояния подряд
*/

//# React собирает обновления состояния
// Вы можете ожидать, что нажатие кнопки "+3" увеличит счетчик три раза, потому что он вызывает setNumber(number + 1) три раза:

//* App.js
import { useState } from 'react';

function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button
        onClick={() => {
          setNumber(number + 1);
          setNumber(number + 1);
          setNumber(number + 1);
        }}
      >
        +3
      </button>
    </>
  );
}

// Однако, как вы помните из предыдущего раздела, значения состояния каждого рендера фиксированы, поэтому значение number в обработчике событий первого рендера всегда 0, независимо от того, сколько раз вы вызовете setNumber(1):

setNumber(0 + 1);
setNumber(0 + 1);
setNumber(0 + 1);

// Но здесь есть еще один фактор. React ждет, пока не будет выполнен весь код в обработчиках событий, прежде чем обрабатывать ваши обновления состояния. Вот почему повторный рендеринг происходит только после всех этих вызовов setNumber().

// Это может напомнить вам официанта, принимающего заказ в ресторане. Официант не бежит на кухню при упоминании вашего первого блюда! Вместо этого он дает вам закончить заказ, позволяет вносить в него изменения и даже принимает заказы от других людей за столом.

// Это позволяет вам обновлять несколько переменных состояния - даже из нескольких компонентов - не вызывая слишком много повторных рендеров. Но это также означает, что пользовательский интерфейс не будет обновлен, пока после вашего обработчика событий и любого кода в нем не завершится. Такое поведение, также известное как батчинг, заставляет ваше приложение React работать намного быстрее. Оно также позволяет избежать путаницы с "полузаконченными" рендерами, в которых обновлены только некоторые переменные.

// React не выполняет пакетную обработку многочисленных намеренных событий, таких как клики - каждый клик обрабатывается отдельно. Будьте уверены, что React выполняет пакетную обработку только тогда, когда это в целом безопасно. Это гарантирует, что, например, если первое нажатие кнопки отключит форму, второе нажатие не отправит ее снова.

//# Обновление одного и того же состояния несколько раз до следующего рендера
