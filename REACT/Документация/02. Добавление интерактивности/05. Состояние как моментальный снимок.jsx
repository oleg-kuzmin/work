//# Состояние как моментальный снимок
// Переменные состояния могут выглядеть как обычные переменные JavaScript, которые можно читать и записывать. Однако состояние ведет себя скорее как моментальный снимок. Установка состояния не изменяет уже имеющуюся переменную состояния, а вместо этого вызывает повторный рендеринг.

/* Вы узнаете
- Как установка состояния вызывает повторный рендеринг
- Когда и как обновляется состояние
- Почему состояние не обновляется сразу после его установки
- Как обработчики событий получают доступ к "снимку" состояния
*/

//# Установка состояния запускает рендеринг
// Вы можете думать о том, что ваш пользовательский интерфейс меняется непосредственно в ответ на событие пользователя, например, на клик. В React эта мысленная модель работает несколько иначе. На предыдущей странице вы видели, что установка состояния запрашивает повторный рендеринг в React. Это означает, что для того, чтобы интерфейс отреагировал на событие, необходимо обновить состояние.

// В этом примере, когда вы нажимаете кнопку "отправить", setIsSent(true) сообщает React о необходимости повторного рендеринга пользовательского интерфейса:

//* App.js
import { useState } from 'react';

function Form() {
  const [isSent, setIsSent] = useState(false);
  const [message, setMessage] = useState('Hi!');
  if (isSent) {
    return <h1>Your message is on its way!</h1>;
  }
  return (
    <form
      onSubmit={e => {
        e.preventDefault();
        setIsSent(true);
        sendMessage(message);
      }}
    >
      <textarea placeholder="Message" value={message} onChange={e => setMessage(e.target.value)} />
      <button type="submit">Send</button>
    </form>
  );
}

function sendMessage(message) {
  // ...
}

/* Вот что происходит, когда вы нажимаете на кнопку:
1. Выполняется обработчик события onSubmit.
2. setIsSent(true) устанавливает isSent в true и ставит в очередь новый рендер.
3. React повторно рендерит компонент в соответствии с новым значением isSent.
*/

// Давайте подробнее рассмотрим связь между состоянием и рендерингом.

//# Рендеринг делает моментальный снимок времени
// "Rendering" означает, что React вызывает ваш компонент, который является функцией. JSX, который вы возвращаете из этой функции, — это как снимок пользовательского интерфейса во времени. Его пропсы, обработчики событий и локальные переменные были рассчитаны используя его состояние на момент рендеринга.