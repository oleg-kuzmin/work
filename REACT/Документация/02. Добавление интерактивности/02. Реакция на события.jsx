//# Реакция на события
// React позволяет добавлять обработчики событий в JSX. Обработчики событий - это ваши собственные функции, которые будут запускаться в ответ на такие взаимодействия, как нажатие, наведение курсора, фокусировка ввода формы и так далее.

/* Вы узнаете
- Различные способы написания обработчика событий
- Как передать логику обработки событий от родительского компонента
- Как распространяются события и как их остановить
*/

//# Добавление обработчиков событий
// Чтобы добавить обработчик событий, вы сначала определите функцию, а затем передадите ее как параметр в соответствующий JSX тег. Например, вот кнопка, которая еще ничего не делает:

//* App.js
function Button() {
  return <button>I don't do anything</button>;
}

/* Вы можете заставить его показывать сообщение, когда пользователь нажимает на кнопку, выполнив следующие три шага:
1. Объявите функцию handleClick внутри вашего компонента Button.
2. Реализуйте логику внутри этой функции (используйте alert для показа сообщения).
3. Добавьте onClick={handleClick} в JSX <button>.
*/

//* App.js
function Button() {
  function handleClick() {
    alert('You clicked me!');
  }
  return <button onClick={handleClick}>Click me</button>;
}

/* Вы определили функцию handleClick, а затем передали ее как параметр в <button>. handleClick - это обработчик события. Функции обработчика события:
- Обычно определяются внутри ваших компонентов.
- Имеют имена, начинающиеся с handle, за которым следует имя события.
*/

// По традиции, принято называть обработчики событий handle, за которым следует имя события. Часто можно встретить onClick={handleClick}, onMouseEnter={handleMouseEnter} и так далее.

// В качестве альтернативы вы можете определить обработчик события в JSX:

<button
  onClick={function handleClick() {
    alert('You clicked me!');
  }}
/>;

// Или, более кратко, с помощью стрелочной функции:

<button
  onClick={() => {
    alert('You clicked me!');
  }}
/>;

// Все эти стили эквивалентны. Инлайн-обработчики событий удобны для коротких функций.

//! Внимание


//! Внимание
