//# Импорт и экспорт компонентов
// Магия компонентов заключается в возможности их повторного использования: вы можете создавать компоненты, которые состоят из других компонентов. Но по мере того, как вы создаете все больше и больше компонентов, часто имеет смысл начать разделять их на разные файлы. Это позволяет легко сканировать файлы и повторно использовать компоненты в большем количестве мест.

/* Вы узнаете
- Что такое файл корневого компонента
- Как импортировать и экспортировать компонент
- Когда использовать импорт и экспорт по умолчанию и по имени
- Как импортировать и экспортировать несколько компонентов из одного файла
- Как разделить компоненты на несколько файлов
*/

//# Корневой файл компонента
// На странице 02. Ваш первый компонент вы создали компонент Profile и компонент Gallery, который его отображает:

//* App.js
function Profile() {
  return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;
}
// export default function Gallery()
function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

// В настоящее время они находятся в корневом файле компонента, названном в данном примере App.js. В Create React App ваше приложение находится в src/App.js. Однако, в зависимости от вашей конфигурации, ваш корневой компонент может находиться в другом файле. Если вы используете фреймворк с файловой маршрутизацией, например Next.js, ваш корневой компонент будет разным для каждой страницы.

//# Экспорт и импорт компонента
// Что если в будущем вы захотите изменить целевой экран и поместить туда список научных книг? Или разместить все профили в другом месте? Имеет смысл перенести Gallery и Profile из корневого файла компонента. Это сделает их более модульными и пригодными для повторного использования в других файлах. Вы можете переместить компонент в три этапа:

//* 1. Сделайте новый JS-файл, в который поместите компоненты.
//* 2. Экспортируйте свою функцию-компонент из этого файла (используя экспорт default или named).
//* 3. Импортируйте его в файл, где вы будете использовать компонент (используя соответствующую технику для импорта default или named exports).

// Здесь Profile и Gallery были перенесены из App.js в новый файл Gallery.js. Теперь вы можете изменить App.js, чтобы импортировать Gallery из Gallery.js:

//* Gallery.js
function Profile() {
  return <img src="https://i.imgur.com/QIrZWGIs.jpg" alt="Alan L. Hart" />;
}
// export default function Gallery()
function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

//* App.js
import Gallery from './Gallery.js';
// export default function App()
function App() {
  return <Gallery />;
}

/* Обратите внимание, что теперь этот пример разбит на два составных файла:
1. Gallery.js
  - Определяет компонент Profile, который используется только в пределах одного файла и не экспортируется.
  - Экспортирует компонент Gallery как экспорт по умолчанию.
2. App.js
  - Импортирует Gallery как импорт по умолчанию из Gallery.js.
  - Экспортирует корневой компонент App как экспорт по умолчанию.
*/

//* Примечание
// Вы можете встретить файлы, в которых расширение .js опускается, например:
import Gallery from './Gallery';
// Либо './Gallery.js', либо './Gallery' будут работать с React, хотя первый вариант ближе к тому, как работают native ES Modules.
//* Примечание

//* Экспорт по умолчанию и именованный экспорт
// Существует два основных способа экспорта значений в JavaScript: экспорт по умолчанию и именованный экспорт. До сих пор в наших примерах использовался только экспорт по умолчанию. Но вы можете использовать один или оба из них в одном файле. В файле может быть не более одного дефолтного экспорта, но в нем может быть сколько угодно именованных экспортов.

// То, как вы экспортируете свой компонент, диктует, как вы должны его импортировать. Вы получите ошибку, если попытаетесь импортировать экспорт по умолчанию так же, как и именованный экспорт! Эта диаграмма поможет вам следить за этим:

/*
Синтаксис       Утверждение экспорта                   Утверждение импорта
По умолчанию    export default function Button() {}    import Button from './Button.js';
Named           export function Button() {}            import { Button } from './Button.js';
*/

// Когда вы пишете импорт по умолчанию, вы можете поместить любое имя после import. Например, вы можете написать import Banana from './Button.js' вместо этого, и это все равно предоставит вам тот же экспорт по умолчанию. В отличие от этого, при именованном импорте имя должно совпадать с обеих сторон. Вот почему они называются именованными импортами!

// Люди часто используют экспорт по умолчанию, если файл экспортирует только один компонент, и используют именованный экспорт, если он экспортирует несколько компонентов и значений. Независимо от того, какой стиль кодирования вы предпочитаете, всегда давайте осмысленные имена вашим компонентным функциям и файлам, которые их содержат. Компоненты без имен, такие как export default () => {}, не рекомендуется использовать, поскольку они затрудняют отладку.
//* Экспорт по умолчанию и именованный экспорт

//# Экспорт и импорт нескольких компонентов из одного файла

