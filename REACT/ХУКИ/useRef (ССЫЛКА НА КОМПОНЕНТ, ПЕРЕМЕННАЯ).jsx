//# useRef (ССЫЛКА НА КОМПОНЕНТ, ПЕРЕМЕННАЯ)
/*
- Представляет собой по сути некий объект, у которого есть единственное свойство current. Из current мы всегда можем получить ссылку на узел. Изначально при создании createRef значение переменной null, далее устанавливаем атрибут ref для элемента jsx. И после монтирования элемента jsx с атрибутом ref, мы получим ссылку на этот элемент jsx. ref не приводит к обновлению компонента в отличие от state.
- Значение useRef не нужно для рендеринга, оно одинаково между всеми ререндерами.
- Вы можете изменить свойство ref.current. В отличие от состояния, оно является изменяемым. Однако, если оно содержит объект, который используется для рендеринга (например, часть вашего состояния), то не стоит мутировать этот объект.
- Когда вы изменяете свойство ref.current, React не перерисовывает ваш компонент. React не знает, когда вы изменяете его, потому что ref - это обычный объект JavaScript.
- Не записывайте или читайте ref.current во время рендеринга, кроме инициализации. Это делает поведение вашего компонента непредсказуемым.
- useRef подходит для хранения информации, которая не влияет на визуальный вывод вашего компонента. Например, если вам нужно хранить ID интервала и получить его позже, вы можете поместить его в useRef. Чтобы обновить значение внутри useRef, вам нужно вручную изменить свойство current.
*/

//# Синтаксис
//* Изначальный объект
const inputElement = useRef(null);

//# Пример
//* импорт
import { useRef } from 'react';

function App() {
  //* создание
  const inputElement = useRef(null);

  return (
    <div>
      //* Добавление атрибута
      <input type="text" ref={inputElement} />
    </div>
  );
}
