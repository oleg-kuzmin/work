//# NUMBER
// Тип данных «число» (number) содержит числа с плавающей точкой в диапазоне от -(253 − 1) до 253 − 1, а также специальные значения Infinity, -Infinity и NaN.

//# ПРИМЕР
//* для записи чисел используются цифры, для разделения целой и десятичной части используется точка
const int = 4;
const decimal = 0.101;
const sameDecimal = 0.101;

//* можно использовать экспоненциальную запись
const scientific = 1e6; // 1000000

//* могут быть представлены в двоичном, восьмеричном или шестнадцатеричном виде, при выводе будут преобразованы в десятичную систему
const binary = 0b11; // 3
const octal = 0o77; // 63
const hexadecimal = 0xff; // 255

//* бесконечность Infinity
console.log(5 / 0); // Infinity
console.log(-3 / 0); // -Infinity

//* не число (not a number) NaN
const result = NaN;
console.log(Number.isNaN(result)); // true

//* неточные вычисления
console.log(0.2 + 0.7); // 0.8999999999999999

//* сравнение очень маленьких и очень больших чисел
const small = 0.11111111111111111;
const smaller = 0.1111111111111111;
console.log(small.toFixed(20)); // 0.11111111111111110494
console.log(smaller.toFixed(20)); // 0.11111111111111110494
console.log(small === smaller); // true

//* операции с числами
const a = 5;
const b = 10;
console.log(-a); // -5
console.log(a + b); // 15
console.log(a - b); // -5
console.log(a / b); // 0.5
console.log(a * b); // 50
console.log((a + b) / 10); // 1.5

//* существует оператор взятия остатка от деления нацело %
console.log(5 % 2); // 1
console.log(5 % 3); // 2
console.log(5 % 5); // 0

//* возведение в степень
console.log(2 ** 4); // 16

//* операторы сравнения, возвращают булевое значение
console.log(5 > 10); // false
console.log(5 >= 10); // false
console.log(5 < 10); // true
console.log(10 <= 10); // true
console.log(5 == 10); // false
console.log(5 === 10); // false
console.log(5 != 10); // true
console.log(5 !== 10); // true

//* числовой разделитель
const number = 1_000_000_000;
console.log(number); // 1000000000

//# ОБЩАЯ ИНФОРМАЦИЯ
/* Для этого типа данных определены стандартные арифметические операции сложения +, вычитания -, умножения *, деления /, взятия остатка от целочисленного деления %, сравнения >, <, >=, <=, ==, ===
- В JavaScript отсутствует отдельный тип данных для целых чисел, для целых чисел также используется тип number.
- Значение NaN используется, чтобы сообщить об операции, результатом которой оказалось не число.
- Если попытаться создать число, которое находится вне диапазона доступных чисел, результатом будет бесконечность.*/

//# INFINITY
/* Для проверки, что значение в переменной является конечным числом, а не специальным значением, пользуйтесь функцией Number.isFinite(), она возвращает true, если переданный аргумент — число.

//# NAN
/* Значение NaN используется, чтобы сообщить об операции, результатом которой оказалось не число.
- Согласно спецификации, NaN не равен самому себе. Проверить, что в переменной хранится NaN простым сравнением не получится.
- Для проверки на NaN пользуйтесь функцией Number.isNaN(), которая возвращает true если переданное значение — NaN.

- В JavaScript существует пять операций, которые могут вернуть NaN:
1) ошибка парсинга числа (например, при попытке превратить строку в число parseInt('привет'))
2) результат математической операции не находится в полей действительных чисел (например, взятие корня от -1)
3) один из операндов в арифметической операции — NaN (5 + NaN)
4) результат арифметической операции не определён для переданных операндов (undefined + undefined)
5) арифметическая операция со строкой, кроме сложения ('привет' * 5)*/
