//# while
// Управляющая конструкция, которая создаёт цикл.

//# синтаксис
while (условие) {
  //тело цикла
}

/*
1) Условие — тут задаётся условие по которому выполняется цикл. Если условие ложно, работа цикла прекращается и тело цикла не выполняется.
2) Тело цикла — это блок операций, которые будут выполнены в случае если условие истинно.
*/

//# пример
const numbers = [1, 2, 3, 4, 5];

//* общий
let i = 0;
while (i < numbers.length) {
  const currentElement = numbers[i];
  console.log(currentElement * currentElement); // 1, 4, 9, 16, 25
  i++;
}

//* вариант с приведением типов в условии цикла
let count = numbers.length;
while (count) {
  console.log(count); // 5, 4, 3, 2, 1
  count--;
}

//* фигурные скобки не требуются для тела цикла из одной строки
let a = 3;
while (a) alert(a--);

//# break (прерывает выполнение цикла)
// break стараются не использовать, потому что он ведёт себя как второе условие цикла и понижает читаемость. Почти всегда цикл с break можно переписать без этого оператора, изменив условие или добавив дополнительную проверку.
let count2 = 5;
while (count2 > 0) {
  if (count2 === 2) {
    break; // цикл прервётся здесь, оператор break убивает цикл
  }
  console.log(count2); // 5, 4, 3
  count--;
}

//# continue (пропускает текущую итерацию)
// Внутри цикла можно использовать оператор continue, он прерывает текущую итерацию и возвращается к проверке условия. Оператор стараются не использовать, потому что он усложняет чтение кода — появляется ещё одно место, где итерация может завершиться. Почти всегда цикл с continue можно переписать на цикл без него, добавив ветвление if.
let count3 = 5;
while (count3 > 0) {
  count3--;
  if (count3 === 2) {
    continue; // когда count будет равен 2, итерация прервется здесь и не дойдет до печати
  }
  console.log(count3); // напечатает 4, 3, 1, 0
}

//# общая информация
/*
Всегда используйте альтернативы циклу while, которые лучше подходят под задачу. Например, у массивов есть много удобных методов: forEach(), filter(), map(). Они лучше читаются и содержат меньше кода.
- Следите, чтобы условие менялось с каждым выполнением тела цикла. Если этого не происходит, то, скорее всего, цикл будет бесконечным.
- while более гибкий цикл чем for, но при его написании легко совершить ошибку. Момент инициализации и изменения переменных в for (операция инициализации и шага) заранее определены. Их можно нарушить, но это не будет хорошо читаться. while предоставляет полную свободу организовывать цикл как угодно, это полностью ручное управление. Можно легко забыть написать что-либо — чаще всего забывают менять переменную из условия в теле цикла.
*/
