//# .map()
// Метод map создаёт новый массив на основе существующего.

//# пример
const firstArr = [0, 1, 2, 3, 4];
const secondArr = firstArr.map(function (item) {
  // Берём каждый элемент массива
  return item * item; // Возводим каждый элемент в квадрат
});

console.log(secondArr); // [0, 1, 4, 9, 16]

const counterIndexed = counter.map(function (item, index) {
  return `${index + 1}. ${item}`;
});

const ivansIndexed = ivans.map(function (item, index, array) {
  const currentIndex = `(${index + 1} из ${array.length})`;
  return `${item} ${currentIndex}`;
});

//# Аргумент 1. Текущий элемент массива
// Текущий элемент массива используется часто, поэтому и стоит на первом месте. Если другие аргументы не нужны, достаточно прописать его.

//# Аргумент 2. Индекс текущего элемента
// Второй аргумент колбэка — фактически счётчик цикла for. Его можно использовать, например, для расстановки позиций в списке.

//# Аргумент 3. Исходный массив
// Исходный массив как аргумент пригодится, когда нужно обратиться к свойствам этого исходного массива.

//# общая информация
/*
- В качестве аргумента map, как и forEach, принимает функцию.
- Эта функция должна вернуть значение, которое станет элементом нового массива.
- Результат работы функции — то, что указано после ключевого слова return.
- Если не прописать return, функция сработает, но вернёт undefined.
- Метод map нельзя применить к массивоподобным объектам. */
