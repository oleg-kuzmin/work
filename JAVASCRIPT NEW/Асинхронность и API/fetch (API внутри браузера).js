//# fetch (API внутри браузера)
/* Метод  создаёт запрос на сервер и возвращает его ответ. На вход fetch принимает два аргумента.

1) Первый — обязательный — URL запрашиваемого ресурса.
2) Второй аргумент — необязательный. Это объект опций. Чаще всего нужны опции method, headers и body: они отвечают за метод запроса, его заголовки и тело.

Метод fetch асинхронный. Когда вы его вызываете, он создаёт промис, а когда получает ответ — переводит промис в нужный статус. Ответ от сервера при этом записывается в промис, так что его можно использовать через then и catch. */

//# пример
//* без тела (GET запрос)
fetch('https://swapi.nomoreparties.co/people').then((res) => console.log(res));

//* c телом
fetch('https://example.com/users', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    username: 'ivan',
  }),
})
  .then((res) => {
    console.log(res);
  })
  .catch((err) => {
    console.log(`Ошибка ${err}. Запрос не выполнен`);
  });

//* получаем json
// Метод json читает ответ от сервера в формате json и возвращает промис. Из этого промиса потом можно доставать нужные нам данные.Поскольку метод json асинхронный, то и использовать его нужно таким образом:
fetch('https://praktikum.yandex.ru')
  .then((res) => {
    return res.json(); // возвращаем результат работы метода и идём в следующий then
  })
  .then((data) => {
    console.log(data.user.name); // если мы попали в этот then, data — это объект
  })
  .catch((err) => {
    console.log(`Ошибка ${err}. Запрос не выполнен`);
  });
