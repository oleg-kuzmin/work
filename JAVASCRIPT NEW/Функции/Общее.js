//# функции
/*
- Функция — это блок из различных команд. С ней легко создавать порядок в коде программы, избавляясь от ненужных повторений и запутанных частей.
- При написании функции указываются параметры - те переменные, с которыми работает функция.
- При вызове функции можно передать в нее аргументы.
- Если функцию передают как аргумент, её называют «колбэком». */

//# общая информация
/*
- Основное отличие в том, что если мы использовали Function Declaration, то JavaScript перенесёт функции вверх текущей области видимости. Это называется «поднятие» (или hoisting).
- На практике это означает, что мы можем использовать Function Declaration до своего же объявления. Пишем — заработай, и где-то потом объясняем как.
- Обычно имя функции пишут стилем camelCase и используют в начале глагол. Отвечает на вопрос: что делает эта функция?.
- Переменные внутри функции существуют только внутри этой функции — этот эффект называется областью видимости.
- Как и массивы, функции в JavaScript — это объекты с дополнительными методами.
- Но при показе кода функции в консоли выводится только код функции. */

//# область видимости функции
/*
- Если идентификатор создан внутри функции, обратиться к нему снаружи нельзя.
- Если обратиться к идентификатору из функции, движок сначала поищет идентификатор в теле этой функции.
Если не найдёт — начнёт искать снаружи (в другой функции и так до глобальной области видимости)
- Переменную называют глобальной, если она объявлена в глобальной области видимости, и локальной — если внутри функции.
- Если в теле функции обратиться к идентификатору, движок JavaScript сначала ищет его в теле этой функции, и уже потом снаружи. Поэтому если и снаружи, и внутри есть одинаковые идентификаторы, движок остановится на внутреннем, а внешний — проигнорирует. */
