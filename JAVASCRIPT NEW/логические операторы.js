// TODO оператор || (ИЛИ)
// result = value1 || value2 || value3;
// || возвращает первое истинное значение. Или последнее, если ничего не найдено.
// Оператор || выполняет следующие действия:
// - Вычисляет операнды слева направо.
// - Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
// - Если все операнды являются ложными (false), возвращает последний из них.
// Значение возвращается в исходном виде, без преобразования.
// Другими словами, цепочка ИЛИ || возвращает первое истинное значение или последнее, если такое значение не найдено.
alert( 1 || 0 ); // 1
alert( true || 'no matter what' ); // true
alert( null || 1 ); // 1 (первое истинное значение)
alert( null || 0 || 1 ); // 1 (первое истинное значение)
alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)
let name = currentUser || defaultUser || "unnamed";

// TODO оператор && (И)
// result = value1 && value2 && value3;
// && возвращает первое ложное значение. Или последнее, если ничего не найдено.
// Оператор && выполняет следующие действия:
// - Вычисляет операнды слева направо.
// - Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
// - Если все операнды были истинными, возвращается последний.
alert( 1 && 0 ); // 0
alert( 1 && 5 ); // 5
alert( null && 5 ); // null
alert( 0 && "no matter what" ); // 0
{this.state.unreadMessages.length > 0 && <h2>You have {this.state.unreadMessages.length} unread messages!</h2>}
// первое значение - false: STOP (возвращает null)
// первое значение - true:  STOP (возвращает второе значение)

// TODO оператор !(НЕ)
// result = !value;
// Оператор принимает один аргумент и выполняет следующие действия:
// - Сначала приводит аргумент к логическому типу true/false.
// - Затем возвращает противоположное значение.
alert( !true ); // false
alert( !0 ); // true
// В частности, двойное НЕ !! используют для преобразования значений к логическому типу:
// То есть первое НЕ преобразует значение в логическое значение и возвращает обратное, а второе НЕ снова инвертирует его.
// В конце мы имеем простое преобразование значения в логическое.
alert( !!"non-empty string" ); // true
alert( !!null ); // false

// x &&= y
// Если x === true, выражение x = y сработает
let a = 1;
let b = 0;
a &&= 2;
console.log(a); // output: 2
b &&= 2;
console.log(b); // output: 0

// x ||= y
// Если x === false, выражение x = y сработает
const a1 = 50;
const b1 = '';
a1 ||= 10;
console.log(a1);  // output: 50
b1 ||= 'string is empty.';
console.log(b1); // output: "string is empty."

// x ??= y
// Если x имеет значение null или undefined.
const a2 = { limit: 50 };
a2.limit ??= 10;
console.log(a.limit); // output: 50
a2.speed ??= 25;
console.log(a.speed); // output: 25