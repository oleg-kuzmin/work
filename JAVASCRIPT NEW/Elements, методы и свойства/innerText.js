//# .innerText
// Предназначено для получения текстового содержимого. Оно отличается от textContent тем, что innerText возвращает только видимое текстовое содержимое. То есть innerText проигнорирует всё, что скрыто свойством display: none, а textContent — нет.

//# пример
//* при считывании сработает конкатенация всех узлов (и label и button)
<form>
  <label for="name">Имя</label>
  <input type="text" id="name" />
  <button type="submit" id="submit">
    Submit
  </button>
</form>;

const form = document.querySelector('form');
const button = document.getElementById('submit');
console.log(form.innerText); // "ИмяSubmit"

//* изменим button с 'submit' на 'done'
button.innerText = 'done';
console.log(button); // <button type="submit" id="submit">done</button>

//* найдем statusElement с 'Loading...' и изменим на 'Data loaded!'
const statusElement = document.getElementById('loading-status');
statusElement.innerText = 'Data loaded!';

//# общая информация
/* - При считывании текста с элемента будет возвращена строка с текстовым содержимым всех вложенных дочерних элементов.
- Аналогичной функциональностью обладает свойство textContent, но он возвращает содержимое всех дочерних элементов, даже скрытых.
- Считывание и изменение текстового содержимого – довольно распространённая задача. innerText позволяет считывать содержимое элемента и всего потомков, но с несколькими исключениями:
1) не считывается содержимое тегов <script> и <style>
2) не считывается содержимое скрытых элементов.
- Свойство может изменять только текстовое содержимое элемента, если попытаться присвоить строку с HTML, она вставится как текст и не превратится в реальные DOM-элементы. Чтобы HTML в строке сработал, используйте innerHTML.
- Свойство innerText работает и как геттер, и как сеттер — обращение к свойству вернёт текстовое содержимое элементов и его потомков, а установка нового значения изменит все текстовое содержимое элемента.
- Установка нового текста с помощью innerText полностью удалит все старое содержимое и запишет новое текстовое значение. Если внутри элемента были другие вложенные потомки, то все они удалятся.
- Когда нужно прочитать или изменить текстовое содержимое, лучше обращаться к textContent. На это есть две причины:
1) textContent работает гораздо быстрее, потому что игнорирует правила видимости;
2) свойство innerText не стандартизировано. Его придумали в Microsoft ещё до появления textContent. Оно стало популярным, и другие производители начали внедрять его в свои браузеры. Но в стандарте innerText по-прежнему нет, а значит, его поведение в разных браузерах может отличаться. А ещё нет гарантий, что оно не изменится в будущем.*/
