//# приоритет операторов
// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
// 19 скобки                    (VALUE)
// 16 постфиксный инкремент     VALUE++ (увеличивает переменную на 1, аналогично value = value + 1, возвращает старое значение)
// 16 постфиксный декремент     VALUE-- (уменьшает переменную на 1, аналогично value = value - 1, возвращает старое значение)
// 15 префиксный инкремент      ++VALUE (увеличивает переменную на 1, аналогично value + 1 = value, возвращает новое значение)
// 15 префиксный декремент      --VALUE (уменьшает переменную на 1, аналогично value - 1 = value, возвращает новое значение)
// 15	унарный плюс	            + (преобразует нечисловые значения в число)
// 15	унарный минус	            - (меняет знак числа на противоположный)
// 15 логическое отрицание      !VALUE
// 14	возведение в степень	    **
// 13	умножение	                *
// 13	деление	                  /
// 13 остаток от деления        %
// 12	сложение	                +
// 12	вычитание	                -
// 5  логическое И              &&
// 4  логическое ИЛИ            ||
// 4  оператор нулевого слияния ?? (используется для присвоения переменным значений по умолчанию, скорее всего потребуются скобки)
// 2	присваивание со сложением +=
// 2	присваивание с вычитанием -=
// 2	присваивание	            =
// 1  запятая                   , (предоставляет возможность вычислять несколько выражений, но возвращается результат только последнего)

//# арифметические операторы
/*
1) +   сложение
2) -   вычитание
3) *   умножение
4) **  возведение в степень
5) /   деление
6) % остаток от деления */

//# операторы присваивания
/*
1) =	 оператор присваивания
2) +=	 оператор присваивания со сложением
3) -=	 оператор присваивания с вычитанием
4) *=  оператор присваивания с умножением
5) /=  оператор присваивания с делением
6) &&= оператор присваивания с логическим И (присваивает значение переменной только если оно true)
7) ||= оператор присваивания с логическим ИЛИ (присваивает значение переменной только если оно false)
8) ??= оператор присваивания c нулевым слиянием (присваивает значение переменной только если оно null или undefined) */

//# операторы сравнения (return true или false)
/* При сравнении значений разных типов JavaScript приводит каждое из них к числу.
Строгое равенство - проверяет равенство без приведения типов (т.е. разные типы не равны).

//* Специальное правило при нестрогом сравнении (null == undefined) true
Эти значения равны друг другу и не равны никаким другим значениям.

1) >   больше
2) <   меньше
3) >=  больше или равно
4) <=  меньше или равно
5) ==  нестрогое равенство
6) !=  нестрогое неравенство
7) === строгое равенство
8) !== строгое неравенство */

//# логические операторы
/*
1) || (оператор или)
Вернёт истину, когда хотя бы одно из булевых переменных истинно.
Возвращает первое истинное значение. Или последнее, если ничего не найдено.
- Вычисляет операнды слева направо.
- Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
- Если все операнды являются ложными (false), возвращает последний из них.

2) && (оператор и)
Вернёт истину только когда две булевы переменные истинны.
Возвращает первое ложное значение. Или последнее, если ничего не найдено.
- Вычисляет операнды слева направо.
- Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
- Если все операнды были истинными, возвращается последний.

3) !  (оператор не)
Отрицание, делает из истины ложь, а из лжи — истину.
- Сначала приводит аргумент к логическому типу true/false.
- Затем возвращает противоположное значение.

4) !! (двойное не)
Используют для простого преобразования значений к логическому типу.
- Первое НЕ преобразует значение в логическое значение и возвращает обратное.
- Второе НЕ снова инвертирует его.

5) ?? (оператор нулевого слияния)
Немного упомяну и про оператор нулевого слияния (??). В выражении между двумя операндами, он будет возвращать первый операнд, если он не равен null или undefined.
- Возвращает первый операнд, если он не равен null или undefined.
- Если все операнды были null или undefined, возвращается последний.*/

//# пример
let yearDays = 365;
console.log((yearDays += 1)); // 366
console.log(7 > 6); // true (больше)
console.log(7 < 6); // false (меньше)
console.log(7 >= 6); // true (больше или равно)
console.log(7 <= 6); // false (меньше или равно)
console.log(7 === 6); // false (проверка на равенство)
console.log(7 !== 6); // true (проверка на неравенство)
console.log('казнить' === 'помиловать'); // false (это разные строки)
console.log('казнить' !== 'помиловать'); // true (это разные строки)
console.log('2' !== 2); // true (строка "2" не равна числу 2)
console.log('Я' > 'А'); // true (строки сравниваются посимвольно)
console.log('Коты' > 'Кода'); // true (строки сравниваются посимвольно)
console.log('Сонный' > 'Сон'); // true (строки сравниваются посимвольно)
console.log(+true); // 1
console.log(+''); // 0
console.log(1 || 0); // 1
console.log(true || 'no matter what'); // true
console.log(null || 1); // 1 (первое истинное значение)
console.log(null || 0 || 1); // 1 (первое истинное значение)
console.log(undefined || null || 0); // 0 (поскольку все ложно, возвращается последнее значение)
console.log(1 && 0); // 0
console.log(1 && 5); // 5
console.log(null && 5); // null
console.log(0 && 'no matter what'); // 0
console.log(!true); // false
console.log(!0); // true
console.log(!!'non-empty string'); // true
console.log(!!null); // false
console.log('' + 1 + 0); // "10"
console.log('' - 1 + 0); // -1
console.log(true + false); // 1
console.log(6 / '3'); // 2
console.log('2' * '3'); // 6
console.log(4 + 5 + 'px'); // "9px"
console.log('$' + 4 + 5); // "$45"
console.log('4' - 2); // 2
console.log('4px' - 2); // NaN
console.log('  -9  ' + 5); // "  -9  5"
console.log('  -9  ' - 5); // -14
console.log(null + 1); // 1
console.log(undefined + 1); // NaN
console.log(' \t \n' - 2); // -2
