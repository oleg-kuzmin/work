// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
// 19 скобки                ( ... )
// 16 постфиксный инкремент ... ++
// 16 постфиксный декремент ... --
// 15 префиксный инкремент  ++ ...
// 15 префиксный декремент  -- ...
// 15	унарный плюс	        +
// 15	унарный минус	        -
// 15 логическое отрицание  ! ...
// 14	возведение в степень	**
// 13	умножение	            *
// 13	деление	              /
// 13 остаток от деления    %
// 12	сложение	            +
// 12	вычитание	            -
// 5  логическое И          &&
// 3  логическое ИЛИ        || ??
// 2	присваивание	        = или += -=
// 1  запятая               ,

// Операнд – то, к чему применяется оператор.
// Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2.
// Иногда их называют «аргументами» вместо «операндов».

// Бинарным называется оператор, который применяется к двум операндам.
// Унарным называется оператор, который применяется к одному операнду.

// Например, оператор унарный минус "-" меняет знак числа на противоположный:
// Унарный, то есть применённый к одному значению, плюс + ничего не делает с числами.
// Но если операнд не число, унарный плюс преобразует его в число.

let x = 1;
alert( +x ); // 1
let y = -2;
alert( +y ); // -2

// Преобразует не числа в числа
alert( +true ); // 1
alert( +"" );   // 0

// Сокращённая арифметика с присваиванием
// +=
// *=
// /=
// -=

// Инкремент ++ увеличивает переменную на 1
let counter = 2;
counter++;        // работает как counter = counter + 1, просто запись короче
alert( counter ); // 3

// Декремент -- уменьшает переменную на 1
let counter2 = 2;
counter2--;        // работает как counter2 = counter2 - 1, просто запись короче
alert( counter2 ); // 1

// постфиксная форма: counter++.
// возвращает старое значение
let counter4 = 1;
let b = counter4++;
alert(b); // 1

// префиксная форма: ++counter.
// возвращает новое значение
let counter3 = 1;
let a = ++counter3;
alert(a); // 2

// Оператор «запятая»
// Оператор «запятая» предоставляет нам возможность вычислять несколько выражений, разделяя их запятой ,
// Каждое выражение выполняется, но возвращается результат только последнего.
let c = (1 + 2, 3 + 4);
alert( c ); // 7 (результат вычисления 3 + 4)

// Смотрим на оператор.
  // если оператор / * - % **
    // происходит численное преобразование
      // undefined   : NaN
      // null	       : 0
      // true/false	 : 1/0
      // string	     : Пробельные символы (пробелы, знаки табуляции \t, знаки новой строки \n и т. п.) по краям обрезаются.
      // Далее, если остаётся пустая строка, то получаем 0, иначе из непустой строки «считывается» число. При ошибке результат NaN.

  // если оператор +
    // если хотя бы один операнд является строкой происходит преобразование в строку
      // иначе происходит численное преобразование


"" + 1 + 0    // "10"
"" - 1 + 0    // -1
true + false  // 1
6 / "3"       // 2
"2" * "3"     // 6
4 + 5 + "px"  // "9px"
"$" + 4 + 5   // "$45"
"4" - 2       // 2
"4px" - 2     // NaN
"  -9  " + 5  // "  -9  5"
"  -9  " - 5  // -14
null + 1      // 1
undefined + 1 // NaN
" \t \n" - 2  // -2



