//# Добавление интерактивности
// Некоторые элементы на экране обновляются в ответ на действия пользователя. Например, щелчок по галерее изображений переключает активное изображение. В React данные, которые меняются со временем, называются состоянием. Вы можете добавить состояние к любому компоненту и обновить его по мере необходимости. В этой главе вы узнаете, как писать компоненты, которые обрабатывают взаимодействия, обновляют свое состояние и отображают разные выходные данные с течением времени.

/* В этой главе
- Как обрабатывать события, инициированные пользователем
- Как заставить компоненты «запоминать» информацию о состоянии
- Как React обновляет пользовательский интерфейс в два этапа
- Почему состояние не обновляется сразу после его изменения
- Как поставить в очередь несколько обновлений состояния
- Как обновить объект в состоянии
- Как обновить массив в состоянии
*/

//# Реагирование на события
// React позволяет добавлять обработчики событий в ваш JSX. Обработчики событий — это ваши собственные функции, которые будут запускаться в ответ на действия пользователя, такие как щелчок, наведение курсора, фокусировка на вводе формы и т. д.

// Встроенные компоненты, например, <button> поддерживают только встроенные события браузера, такие как onClick. Однако вы также можете создавать свои собственные компоненты и давать свойствам их обработчиков событий любые имена, характерные для приложения, которые вам нравятся.

function App() {
  return <Toolbar onPlayMovie={() => alert('Playing!')} onUploadImage={() => alert('Uploading!')} />;
}

function Toolbar({ onPlayMovie, onUploadImage }) {
  return (
    <div>
      <Button onClick={onPlayMovie}>Play Movie</Button>
      <Button onClick={onUploadImage}>Upload Image</Button>
    </div>
  );
}

function Button({ onClick, children }) {
  return <button onClick={onClick}>{children}</button>;
}

//# Состояние: память компонента
// Компонентам часто необходимо изменить то, что отображается на экране в результате взаимодействия. Ввод в форму должен обновить поле ввода, нажатие «Далее» на карусели изображений должно изменить отображаемое изображение, нажатие «Купить» помещает продукт в корзину. Компоненты должны «запоминать» вещи: текущее входное значение, текущее изображение, корзину. В React такой тип памяти для конкретного компонента называется состоянием.

// Вы можете добавить состояние к компоненту с помощью useStateхука. Хуки — это специальные функции, которые позволяют вашим компонентам использовать функции React (состояние — одна из таких функций). Хук useStateпозволяет объявить переменную состояния. Он принимает начальное состояние и возвращает пару значений: текущее состояние и функцию установки состояния, которая позволяет вам обновить его.

const [index, setIndex] = useState(0);
const [showMore, setShowMore] = useState(false);

// Вот как галерея изображений использует и обновляет состояние по клику:

import { useState } from 'react';
import { sculptureList } from './data.js';

function Gallery() {
  const [index, setIndex] = useState(0);
  const [showMore, setShowMore] = useState(false);
  const hasNext = index < sculptureList.length - 1;

  function handleNextClick() {
    if (hasNext) {
      setIndex(index + 1);
    } else {
      setIndex(0);
    }
  }

  function handleMoreClick() {
    setShowMore(!showMore);
  }

  let sculpture = sculptureList[index];
  return (
    <>
      <button onClick={handleNextClick}>Next</button>
      <h2>
        <i>{sculpture.name} </i>
        by {sculpture.artist}
      </h2>
      <h3>
        ({index + 1} of {sculptureList.length})
      </h3>
      <button onClick={handleMoreClick}>{showMore ? 'Hide' : 'Show'} details</button>
      {showMore && <p>{sculpture.description}</p>}
      <img src={sculpture.url} alt={sculpture.alt} />
    </>
  );
}

//# Рендеринг и коммит
