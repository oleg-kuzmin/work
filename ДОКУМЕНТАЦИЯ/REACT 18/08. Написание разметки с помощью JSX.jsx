//# Написание разметки с помощью JSX
// JSX — это расширение синтаксиса для JavaScript, позволяющее писать HTML-подобную разметку внутри файла JavaScript. Хотя есть и другие способы написания компонентов, большинство разработчиков React предпочитают лаконичность JSX, и большинство кодовых баз используют его.

/* Вы выучите:
- Почему React смешивает разметку с логикой рендеринга
- Чем JSX отличается от HTML
- Как отображать информацию с помощью JSX
*/

//# JSX: добавление разметки в JavaScript
// Интернет был построен на HTML, CSS и JavaScript. В течение многих лет веб-разработчики хранили контент в HTML, дизайн в CSS и логику в JavaScript — часто в отдельных файлах! Контент был размечен внутри HTML, а логика страницы жила отдельно в JavaScript.

// Но по мере того, как Интернет становился все более интерактивным, содержание все больше определялось логикой. JavaScript отвечал за HTML! Вот почему в React логика рендеринга и разметка живут вместе в одном месте — компонентах.

// Сохранение логики рендеринга кнопки и разметки вместе гарантирует их синхронизацию друг с другом при каждом редактировании. И наоборот, несвязанные детали, такие как разметка кнопки и разметка боковой панели, изолированы друг от друга, что делает более безопасным изменение любой из них по отдельности.

// Каждый компонент React — это функция JavaScript, которая может содержать некоторую разметку, которую React отображает в браузере. Компоненты React используют расширение синтаксиса под названием JSX для представления этой разметки. JSX очень похож на HTML, но немного строже и может отображать динамическую информацию. Лучший способ понять это — преобразовать некоторую разметку HTML в разметку JSX.

//# Примечание
// JSX и React — это две разные вещи. Они часто используются вместе, но вы можете  использовать их независимо друг от друга. JSX — это расширение синтаксиса, а React — это библиотека JavaScript.

//# Преобразование HTML в JSX
/* Предположим, что у вас есть некоторый (совершенно правильный) HTML:
<h1>Hedy Lamarr's Todos</h1>
<img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo">
<ul>
  <li>Invent new traffic lights
  <li>Rehearse a movie scene
  <li>Improve the spectrum technology
</ul>
*/

// И вы хотите поместить его в свой компонент:
function TodoList() {
  return somehing;
}

// Если вы скопируете и вставите его как есть, он не будет работать.

// Это потому, что JSX строже и имеет несколько больше правил, чем HTML! Если вы прочитали сообщения об ошибках выше, они помогут вам исправить разметку, или вы можете следовать приведенному ниже руководству.

//* Примечание
// В большинстве случаев сообщения об ошибках React на экране помогут вам найти источник проблемы. Прочитайте их, если вы застряли!

//# Правила JSX
//# 1. Вернуть один корневой элемент
// Чтобы вернуть несколько элементов из компонента, оберните их одним родительским тегом.

// Например, вы можете использовать <div>:
<div>
  <h1>Hedy Lamarr's Todos</h1>
  <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo" />
  <ul>...</ul>
</div>;

// Если вы не хотите добавлять лишнее <div>в свою разметку, вы можете вместо этого написать <> и </>:
<>
  <h1>Hedy Lamarr's Todos</h1>
  <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo" />
  <ul>...</ul>
</>;

// Этот пустой тег называется фрагментом. Фрагменты позволяют группировать элементы, не оставляя следов в HTML-дереве браузера.

//* Почему необходимо обернуть несколько тегов JSX?
// JSX выглядит как HTML, но внутри он трансформируется в простые объекты JavaScript. Вы не можете вернуть два объекта из функции, не поместив их в массив. Это объясняет, почему вы также не можете вернуть два тега JSX, не завернув их в другой тег или фрагмент.

//# 2. Закройте все теги
// JSX требует, чтобы теги были закрыты явно: самозакрывающиеся теги, такие как, <img> должны стать <img />, а теги-обертки, такие как, <li>oranges должны быть записаны как <li>oranges</li>.

// Вот как выглядит изображение Hedy Lamarr и элементы списка в закрытом виде:
<>
  <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" class="photo" />
  <ul>
    <li>Invent new traffic lights</li>
    <li>Rehearse a movie scene</li>
    <li>Improve the spectrum technology</li>
  </ul>
</>;

//# 3. CamelCase все самое необходимое!
// JSX превращается в JavaScript, а атрибуты, написанные в JSX, становятся ключами объектов JavaScript. В ваших собственных компонентах вам часто потребуется считывать эти атрибуты в переменные. Но JavaScript имеет ограничения на имена переменных. Например, их имена не могут содержать тире или быть зарезервированными словами, такими как class.

// Вот почему в React многие атрибуты HTML и SVG записываются в camelCase. Например, вместо stroke-widthвы используете strokeWidth. Поскольку classэто зарезервированное слово, в React classNameвместо этого вы пишете, названное в честь соответствующего свойства DOM:
<img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" className="photo" />;

// Вы можете найти все эти атрибуты в списке реквизитов компонента DOM. Если вы ошибетесь, не беспокойтесь — React напечатает сообщение с возможным исправлением в консоли браузера.

//* Ловушка
//! По историческим причинам aria- и data-атрибуты пишутся как в HTML с дефисами.

//* Совет: используйте конвертер JSX
// Преобразование всех этих атрибутов в существующую разметку может быть утомительным! Мы рекомендуем использовать конвертер для перевода существующих HTML и SVG в JSX. Конвертеры очень полезны на практике, но все же стоит понимать, что происходит, чтобы вы могли комфортно писать JSX самостоятельно.

// Вот ваш окончательный результат:
function TodoList() {
  return (
    <>
      <h1>Hedy Lamarr's Todos</h1>
      <img src="https://i.imgur.com/yXOvdOSs.jpg" alt="Hedy Lamarr" className="photo" />
      <ul>
        <li>Invent new traffic lights</li>
        <li>Rehearse a movie scene</li>
        <li>Improve the spectrum technology</li>
      </ul>
    </>
  );
}

//# Резюме
/*
Теперь вы знаете, почему существует JSX и как его использовать в компонентах:
- Компоненты React группируют логику рендеринга вместе с разметкой, потому что они связаны.
- JSX похож на HTML с некоторыми отличиями. Вы можете использовать конвертер, если вам нужно.
- Сообщения об ошибках часто укажут вам правильное направление для исправления вашей разметки.
*/
