//# Добавление интерактивности
// Некоторые элементы на экране обновляются в ответ на действия пользователя. Например, щелчок по галерее изображений переключает активное изображение. В React данные, которые меняются со временем, называются состоянием. Вы можете добавить состояние к любому компоненту и обновить его по мере необходимости. В этой главе вы узнаете, как писать компоненты, которые обрабатывают взаимодействия, обновляют свое состояние и отображают разные выходные данные с течением времени.

/* В этой главе
- Как обрабатывать события, инициированные пользователем
- Как заставить компоненты «запоминать» информацию о состоянии
- Как React обновляет пользовательский интерфейс в два этапа
- Почему состояние не обновляется сразу после его изменения
- Как поставить в очередь несколько обновлений состояния
- Как обновить объект в состоянии
- Как обновить массив в состоянии
*/

//# Реагирование на события
// React позволяет добавлять обработчики событий в ваш JSX. Обработчики событий — это ваши собственные функции, которые будут запускаться в ответ на действия пользователя, такие как щелчок, наведение курсора, фокусировка на вводе формы и т. д.

// Встроенные компоненты, например, <button> поддерживают только встроенные события браузера, такие как onClick. Однако вы также можете создавать свои собственные компоненты и давать свойствам их обработчиков событий любые имена, характерные для приложения, которые вам нравятся.

function App() {
  return <Toolbar onPlayMovie={() => alert('Playing!')} onUploadImage={() => alert('Uploading!')} />;
}

function Toolbar({ onPlayMovie, onUploadImage }) {
  return (
    <div>
      <Button onClick={onPlayMovie}>Play Movie</Button>
      <Button onClick={onUploadImage}>Upload Image</Button>
    </div>
  );
}

function Button({ onClick, children }) {
  return <button onClick={onClick}>{children}</button>;
}
