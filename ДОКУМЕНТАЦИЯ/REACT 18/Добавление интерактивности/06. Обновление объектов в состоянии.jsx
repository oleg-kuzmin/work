//# Обновление объектов в состоянии
// Состояние может содержать любое значение JavaScript, включая объекты. Но вы не должны напрямую изменять объекты, которые вы держите в состоянии React. Вместо этого, когда вы хотите обновить объект, вам нужно создать новый (или сделать копию существующего), а затем установить состояние для использования этой копии.

/* Вы выучите:
- Как правильно обновить объект в состоянии React
- Как обновить вложенный объект, не изменяя его
- Что такое неизменность и как ее не нарушить
- Как сделать копирование объектов менее повторяющимся с помощью Immer
*/

//# Что такое мутация?
// Вы можете хранить любое значение JavaScript в состоянии.

const [x, setX] = useState(0);

// До сих пор вы работали с числами, строками и логическими значениями. Эти виды значений JavaScript являются «неизменяемыми», то есть неизменяемыми или «только для чтения». Вы можете запустить повторный рендеринг для замены значения:

setX(5);

// Состояние x изменилось с 0 на 5, но само число 0 не изменилось. Невозможно внести какие-либо изменения во встроенные примитивные значения, такие как числа, строки и логические значения в JavaScript.

// Теперь рассмотрим объект в состоянии:

const [position, setPosition] = useState({ x: 0, y: 0 });

// Технически возможно изменить содержимое самого объекта . Это называется мутацией:

position.x = 5;

// Однако, хотя объекты в состоянии React технически изменяемы, вы должны обращаться с ними так, как если бы они были неизменяемыми — например, числа, логические значения и строки. Вместо того, чтобы изменять их, вы всегда должны заменять их.

//# Рассматривать состояние как доступное только для чтения
