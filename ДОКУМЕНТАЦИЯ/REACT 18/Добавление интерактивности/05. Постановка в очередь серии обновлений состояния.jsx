//# Постановка в очередь серии обновлений состояния
// Установка переменной состояния поставит в очередь другой рендеринг. Но иногда вы можете захотеть выполнить несколько операций над значением перед постановкой в ​​очередь следующего рендеринга. Для этого полезно понять, как React пакетно обновляет состояние.

/* Вы выучите:
- Что такое «пакетная обработка» и как React использует ее для обработки нескольких обновлений состояния
- Как применить несколько обновлений к одной и той же переменной состояния подряд
*/

//# Обновления состояния пакетов React
// Вы можете ожидать, что нажатие кнопки «+3» увеличит счетчик три раза, потому что он вызывается setNumber(number + 1) три раза:

import { useState } from 'react';

function Counter() {
  const [number, setNumber] = useState(0);

  return (
    <>
      <h1>{number}</h1>
      <button
        onClick={() => {
          setNumber(number + 1);
          setNumber(number + 1);
          setNumber(number + 1);
        }}
      >
        +3
      </button>
    </>
  );
}

// Однако, как вы, возможно, помните из предыдущего раздела, значения состояния каждого рендеринга фиксированы, поэтому значение number внутри обработчика событий первого рендеринга всегда равно 0, независимо от того, сколько раз вы вызываете setNumber(1):

setNumber(0 + 1);
setNumber(0 + 1);
setNumber(0 + 1);

// Но здесь действует еще один фактор. React ждет, пока весь код в обработчиках событий не будет запущен, прежде чем обрабатывать ваши обновления состояния. Вот почему повторный рендеринг происходит только после всех этих setNumber() вызовов.

// Это может напомнить вам официанта, принимающего заказ в ресторане. Официант не бежит на кухню при упоминании вашего первого блюда! Вместо этого они позволяют вам закончить свой заказ, позволяют вносить в него изменения и даже принимать заказы от других людей за столом.

// Это позволяет вам обновлять несколько переменных состояния — даже из нескольких компонентов — без запуска слишком большого количества повторных рендерингов. Но это также означает, что пользовательский интерфейс не будет обновляться до тех пор , пока ваш обработчик событий и любой код в нем не завершатся. Такое поведение, также известное как пакетная обработка, позволяет вашему приложению React работать намного быстрее. Это также позволяет избежать сбивающих с толку «недоделанных» рендеров, в которых были обновлены только некоторые переменные.

// React не объединяет несколько преднамеренных событий, таких как клики , — каждый клик обрабатывается отдельно. Будьте уверены, что React выполняет пакетную обработку только тогда, когда это безопасно. Это гарантирует, что, например, если первый щелчок кнопки отключит форму, второй щелчок не отправит ее снова.


