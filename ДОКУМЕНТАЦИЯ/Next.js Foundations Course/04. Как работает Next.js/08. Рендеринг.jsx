//# Что такое рендеринг?
// Существует неизбежная единица работы по преобразованию кода, который вы пишете в React, в HTML-представление вашего пользовательского интерфейса. Этот процесс называется рендерингом.

// Рендеринг может происходить на сервере или на клиенте. Это может произойти либо заранее во время сборки, либо при каждом запросе во время выполнения.

// В Next.js доступны три типа методов рендеринга: рендеринг на стороне сервера, генерация статического сайта и рендеринг на стороне клиента.

//# Предварительный рендеринг
// Серверный рендеринг и генерация статического сайта также называются предварительным рендерингом, поскольку получение внешних данных и преобразование компонентов React в HTML происходит до отправки результата клиенту.

//# Клиентский рендеринг против предварительного рендеринга
// В стандартном приложении React браузер получает от сервера пустую HTML-оболочку вместе с инструкциями JavaScript для создания пользовательского интерфейса. Это называется рендерингом на стороне клиента, поскольку первоначальная работа рендеринга происходит на устройстве пользователя.

// Примечание. Вы можете использовать рендеринг на стороне клиента для определенных компонентов в вашем приложении Next.js, выбрав получение данных с помощью React useEffect() или перехватчика выборки данных, такого как useSWR.

// Напротив, Next.js по умолчанию предварительно отображает каждую страницу. Предварительный рендеринг означает, что HTML генерируется заранее на сервере, а не выполняется с помощью JavaScript на устройстве пользователя.

// На практике это означает, что в приложении, полностью визуализируемом на стороне клиента, пользователь будет видеть пустую страницу во время выполнения рендеринга. По сравнению с предварительно обработанным приложением, где пользователь увидит созданный HTML.

// Давайте обсудим два типа предварительного рендеринга:

//# Серверный рендеринг
// При рендеринге на стороне сервера HTML-код страницы генерируется на сервере для каждого запроса. Сгенерированные данные HTML, JSON и инструкции JavaScript, необходимые для того, чтобы сделать страницу интерактивной, затем отправляются клиенту.

// На клиенте HTML используется для отображения быстрой неинтерактивной страницы, а React использует данные JSON и инструкции JavaScript, чтобы сделать компоненты интерактивными (например, прикрепив обработчики событий к кнопке). Этот процесс называется гидратацией.

// В Next.js вы можете выбрать рендеринг страниц на стороне сервера с помощью getServerSideProps.

// Примечание. В React 18 и Next 12 представлена ​​альфа-версия серверных компонентов React. Серверные компоненты полностью визуализируются на сервере и для рендеринга не требуется клиентский JavaScript. Кроме того, серверные компоненты позволяют разработчикам хранить некоторую логику на сервере и отправлять клиенту только результат этой логики. Это уменьшает размер пакета, отправляемого клиенту, и повышает производительность рендеринга на стороне клиента. Подробнее о серверных компонентах React можно узнать здесь.

//# Генерация статического сайта
// При создании статического сайта HTML генерируется на сервере, но в отличие от рендеринга на стороне сервера во время выполнения сервер отсутствует. Вместо этого контент создается один раз, во время сборки, при развертывании приложения, а HTML-код сохраняется в CDN и повторно используется для каждого запроса.

// В Next.js вы можете выбрать статическое создание страниц с помощью getStaticProps.

// Примечание. Вы можете использовать инкрементную статическую регенерацию для создания или обновления статических страниц после создания сайта. Это означает, что вам не придется перестраивать весь сайт, если ваши данные изменятся.

// Прелесть Next.js в том, что вы можете выбрать наиболее подходящий метод рендеринга для вашего варианта использования постранично, будь то генерация статического сайта, рендеринг на стороне сервера или рендеринг на стороне клиента. Чтобы узнать больше о том, какой метод рендеринга подходит для вашего конкретного случая использования, см. документацию по выборке данных.

// В следующем разделе мы обсудим, где ваш код можно хранить или запускать после его развертывания.
