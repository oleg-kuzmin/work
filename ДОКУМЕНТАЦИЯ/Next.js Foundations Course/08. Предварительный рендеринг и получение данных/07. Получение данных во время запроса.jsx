//# Получение данных во время запроса
// Если вам нужно получить данные во время запроса, а не во время сборки, вы можете попробовать рендеринг на стороне сервера:

// Чтобы использовать рендеринг на стороне сервера, вам необходимо экспортировать getServerSideProps, а не getStaticProps со своей страницы.

//# С использованием getServerSideProps
// Вот стартовый код для getServerSideProps. Для нашего примера с блогом в этом нет необходимости, поэтому мы не будем его реализовывать.

export async function getServerSideProps(context) {
  return {
    props: {
      // props for your component
    },
  };
}

// Поскольку getServerSideProps вызывается во время запроса, его параметр (context) содержит параметры, специфичные для запроса.

// Его следует использовать getServerSideProps только в том случае, если вам необходимо предварительно отобразить страницу, данные которой должны быть получены во время запроса. Время получения первого байта (TTFB) будет медленнее, чем getStaticProps потому, что сервер должен вычислять результат при каждом запросе, а результат не может быть кэширован CDN без дополнительной настройки.

//# Рендеринг на стороне клиента
// Если вам не требуется предварительная визуализация данных, вы также можете использовать следующую стратегию (называемую клиентской визуализацией):

// Статически генерировать (предварительно визуализировать) части страницы, не требующие внешних данных.
// Когда страница загрузится, получите внешние данные от клиента с помощью JavaScript и заполните оставшиеся части.

// Этот подход хорошо работает, например, для страниц панели управления пользователя. Поскольку панель мониторинга — это частная страница, предназначенная для конкретного пользователя, SEO не имеет значения, и страницу не нужно предварительно отображать. Данные часто обновляются, что требует выборки данных во время запроса.

//# SWR
// Команда Next.js создала хук React для извлечения данных под названием SWR. Мы настоятельно рекомендуем это, если вы получаете данные на стороне клиента. Он обрабатывает кэширование, повторную проверку, отслеживание фокуса, интервальную повторную выборку и многое другое. Мы не будем здесь вдаваться в подробности, но вот пример использования:

import useSWR from 'swr';

function Profile() {
  const { data, error } = useSWR('/api/user', fetch);

  if (error) return <div>failed to load</div>;
  if (!data) return <div>loading...</div>;
  return <div>hello {data.name}!</div>;
}

// Чтобы узнать больше, ознакомьтесь с документацией SWR.

//# Вот и все!
// На следующем уроке мы создадим страницы для каждой записи блога, используя динамические маршруты.

// Опять же, вы можете получить подробную информацию о извлечении данных getStaticProps и getServerSideProps в документации по извлечению данных.
