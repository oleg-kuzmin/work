//# Ваш первый компонент
// Компоненты — одна из основных концепций React. Они являются основой, на которой вы строите пользовательские интерфейсы (UI), что делает их идеальным местом для начала вашего путешествия по React!

/*
Ты выучишь:
- Что такое компонент
- Какую роль компоненты играют в приложении React
- Как написать свой первый компонент React
*/

//# Компоненты: строительные блоки пользовательского интерфейса.
// В Интернете HTML позволяет нам создавать богато структурированные документы с помощью встроенного набора тегов, например таких как <h1> и <li>:

<article>
  <h1>My First Component</h1>
  <ol>
    <li>Components: UI Building Blocks</li>
    <li>Defining a Component</li>
    <li>Using a Component</li>
  </ol>
</article>;

// Эта разметка представляет данную статью <article>, ее заголовок <h1> и сокращенное оглавление в виде упорядоченного списка <ol>. Подобная разметка в сочетании с CSS для стиля и JavaScript для интерактивности лежит за каждой боковой панелью, аватаром, модальным окном, раскрывающимся списком — за каждой частью пользовательского интерфейса, который вы видите в Интернете.

// React позволяет объединить разметку, CSS и JavaScript в пользовательские «компоненты» - повторно используемые элементы пользовательского интерфейса для вашего приложения. Код оглавления, который вы видели выше, можно превратить в компонент <TableOfContents />, который можно отображать на каждой странице. Внутри он по-прежнему использует те же HTML-теги, что и <article>, <h1> и т. д.

// Как и в случае с HTML-тегами, вы можете компоновать, упорядочивать и вкладывать компоненты для создания целых страниц. Например, страница документации, которую вы читаете, состоит из компонентов React:

<PageLayout>
  <NavigationHeader>
    <SearchBar />
    <Link to="/docs">Docs</Link>
  </NavigationHeader>
  <Sidebar />
  <PageContent>
    <TableOfContents />
    <DocumentationText />
  </PageContent>
</PageLayout>;

// По мере роста вашего проекта вы заметите, что многие из ваших проектов могут быть составлены путем повторного использования уже написанных вами компонентов, что ускоряет вашу разработку. Наше оглавление можно добавить на любой экран с помощью <TableOfContents />! Вы даже можете начать свой проект с помощью тысяч компонентов, которыми пользуется сообщество React с открытым исходным кодом, таких как Chakra UI и Material UI.

//# Определение компонента
// Традиционно при создании веб-страниц веб-разработчики размечали их контент, а затем добавляли взаимодействие, добавляя немного JavaScript. Это отлично работало, когда взаимодействие в сети было приятным. Теперь это ожидается для многих сайтов и всех приложений. React ставит интерактивность на первое место, но при этом использует ту же технологию: компонент React — это функция JavaScript, в которую вы можете добавить разметку. Вот как это выглядит:

function Profile() {
  return <img src="https://i.imgur.com/MK3eW3Am.jpg" alt="Katherine Johnson" />;
}

// А вот как построить компонент:

//* Шаг 1. Экспортируйте компонент
// Префикс export default представляет собой стандартный синтаксис JavaScript (не специфичный для React). Он позволяет пометить основную функцию в файле, чтобы позже ее можно было импортировать из других файлов. (Подробнее об импорте см. в разделе «Импорт и экспорт компонентов»!)

//* Шаг 2: Определите функцию
// Определяете функцию JavaScript с именем Profile - function Profile() {}.

//! ловушка
// Компоненты React — это обычные функции JavaScript, но их имена должны начинаться с заглавной буквы, иначе они не будут работать!
//! ловушка

//* Шаг 3. Добавьте разметку
// Компонент возвращает тег <img /> с атрибутами src и alt. <img /> написан как HTML, но на самом деле это JavaScript под капотом! Этот синтаксис называется JSX и позволяет встраивать разметку в JavaScript.

// Оператор return может быть записан в одну строку, как в этом компоненте:
function Profile() {
  return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;
}

// Но если ваша разметка не вся находится на той же строке, что и ключевое слово return, вы должны заключить ее в пару круглых скобок:
function Profile() {
  return (
    <div>
      <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
    </div>
  );
}

//! ловушка
// Без круглых скобок любой код в последующих строках после return будет игнорироваться!
//! ловушка

//# Использование компонента
// Теперь, когда вы определили свой компонент Profile, вы можете вложить его в другие компоненты. Например, вы можете экспортировать компонент Gallery, который использует несколько компонентов Profile:

function Profile() {
  return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;
}

function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

//# Что видит браузер
/*
Обратите внимание на разницу в регистре:
- <section> имеет нижний регистр, поэтому React знает, что мы ссылаемся на HTML-тег.
- <Profile /> начинается с заглавной буквы P, поэтому React знает, что мы хотим использовать наш компонент с именем Profile.
*/

// Profile содержит еще больше HTML: тег <img />. В итоге вот что видит браузер:
<section>
  <h1>Amazing scientists</h1>
  <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
  <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
  <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
</section>;

//# Вложение и организация компонентов
// Компоненты — это обычные функции JavaScript, поэтому вы можете хранить несколько компонентов в одном файле. Это удобно, когда компоненты относительно небольшие или тесно связаны друг с другом. Если этот файл переполнится, вы всегда можете перенести Profile в отдельный файл. О том, как это сделать, вы узнаете вскоре на странице об импорте.

// Поскольку компоненты Profile визуализируются внутри Gallery (даже несколько раз!), мы можем сказать, что Gallery это родительский компонент, отображающий каждый Profile как «дочерний». Это часть магии React: вы можете определить компонент один раз, а затем использовать его в любом количестве мест и столько раз, сколько захотите.

//! ловушка
// Компоненты могут отображать другие компоненты, но их никогда не следует вкладывать друг в друга:
function Gallery() {
  function Profile() {}
}

// Приведенный выше фрагмент работает очень медленно и вызывает ошибки. Вместо этого определите каждый компонент на верхнем уровне:
function Gallery() {}
function Profile() {}

// Когда дочернему компоненту требуются некоторые данные от родительского компонента, передайте их через реквизиты, а не через определения вложенности.
//! ловушка

//* ГЛУБОКОЕ ПОГРУЖЕНИЕ (Компоненты полностью вниз)
// Ваше приложение React начинается с «корневого» компонента. Обычно он создается автоматически при запуске нового проекта. Например, если вы используете CodeSandbox или фреймворк Next.js, корневой компонент определен в pages/index.js. В этих примерах вы экспортировали корневые компоненты.

// Большинство приложений React полностью используют компоненты. Это означает, что вы будете использовать компоненты не только для повторно используемых элементов, таких как кнопки, но и для более крупных элементов, таких как боковые панели, списки и, в конечном итоге, целые страницы! Компоненты — это удобный способ организовать код пользовательского интерфейса и разметку, даже если некоторые из них используются только один раз.

// Фреймворки на основе React идут еще дальше. Вместо того, чтобы использовать пустой HTML-файл и позволить React «взять на себя» управление страницей с помощью JavaScript, они также автоматически генерируют HTML из ваших компонентов React. Это позволяет вашему приложению отображать некоторый контент до загрузки кода JavaScript.

// Тем не менее, многие веб-сайты используют React только для добавления интерактивности к существующим HTML-страницам. У них много корневых компонентов вместо одного для всей страницы. Вы можете использовать столько React, сколько вам нужно.
//* ГЛУБОКОЕ ПОГРУЖЕНИЕ (Компоненты полностью вниз)

//# Резюме
/*
Вы только что впервые попробовали React! Напомним некоторые ключевые моменты.
- React позволяет создавать компоненты - повторно используемые элементы пользовательского интерфейса для вашего приложения.
- В приложении React каждая часть пользовательского интерфейса является компонентом.
- Компоненты React — это обычные функции JavaScript, за исключением:
1. Их имена всегда начинаются с заглавной буквы.
2. Они возвращают разметку JSX.
*/
