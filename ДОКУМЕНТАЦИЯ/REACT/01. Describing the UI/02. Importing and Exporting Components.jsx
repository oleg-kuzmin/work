//# Импорт и экспорт компонентов
// Магия компонентов заключается в их возможности повторного использования: вы можете создавать компоненты, состоящие из других компонентов. Но по мере того, как вы вкладываете все больше и больше компонентов, часто имеет смысл разбить их на разные файлы. Это позволяет вам легко сканировать файлы и повторно использовать компоненты в большем количестве мест.

/*
Ты выучишь:
- Что такое файл корневого компонента
- Как импортировать и экспортировать компонент
- Когда использовать импорт и экспорт по умолчанию и именованный
- Как импортировать и экспортировать несколько компонентов из одного файла
- Как разделить компоненты на несколько файлов
*/

//# Корневой файл компонента
// В вашем первом компоненте вы создали Profile компонент и Gallery компонент, который его отображает:
function Profile() {
  return <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />;
}

export default function Gallery() {
  return (
    <section>
      <h1>Amazing scientists</h1>
      <Profile />
      <Profile />
      <Profile />
    </section>
  );
}

// В настоящее время они находятся в корневом файле компонента, названном App.jsв этом примере. Однако в зависимости от ваших настроек ваш корневой компонент может находиться в другом файле. Если вы используете фреймворк с маршрутизацией на основе файлов, например Next.js, ваш корневой компонент будет разным для каждой страницы.

//# Экспорт и импорт компонента
/*
Что, если в будущем вы захотите изменить целевой экран и разместить там список научных книг? Или разместить все профили где-то еще? Имеет смысл переместить Galleryкорневой Profileфайл компонента. Это сделает их более модульными и пригодными для повторного использования в других файлах. Вы можете переместить компонент в три этапа:

1. Создайте новый JS-файл для размещения компонентов.
2. Экспортируйте свой функциональный компонент из этого файла (используя экспорт по умолчанию или именованный).
3. Импортируйте его в файл, в котором вы будете использовать компонент (используя соответствующий метод импорта экспорта по умолчанию или поименованного экспорта).
*/

//* App.js
// import Gallery from './Gallery.js';
// export default function App() {
//   return (
//     <Gallery />
//   );
// }

//* Gallery.js
// function Profile() {
//   return (
//     <img
//       src="https://i.imgur.com/QIrZWGIs.jpg"
//       alt="Alan L. Hart"
//     />
//   );
// }
// export default function Gallery() {
//   return (
//     <section>
//       <h1>Amazing scientists</h1>
//       <Profile />
//       <Profile />
//       <Profile />
//     </section>
//   );
// }

/*
Обратите внимание, что этот пример теперь разбит на два файла-компонента:
1. Gallery.js:
- Определяет Profile компонент, который используется только в одном файле и не экспортируется.
- Экспортирует Gallery компонент как экспорт по умолчанию.
2. App.js:
- Импортирует Gallery как импорт по умолчанию из Gallery.js
- Экспортирует корневой Appкомпонент как экспорт по умолчанию.
*/

//* Примечание
/*
Вы можете встретить файлы, у которых отсутствует .js расширение файла, например:
import Gallery from './Gallery';
Либо './Gallery.js'или './Gallery'будет работать с React, хотя первый ближе к тому, как работают собственные ES-модули.
*/
//* Примечание

//* ГЛУБОКОЕ ПОГРУЖЕНИЕ (Экспорт по умолчанию и именованный экспорт)
// Существует два основных способа экспорта значений с помощью JavaScript: экспорт по умолчанию и именованный экспорт. До сих пор в наших примерах использовался только экспорт по умолчанию. Но вы можете использовать один или оба из них в одном файле. Файл может иметь не более одного экспорта по умолчанию, но может иметь столько именованных экспортов, сколько вам нужно.

// То, как вы экспортируете свой компонент, определяет, как вы должны его импортировать. Вы получите сообщение об ошибке, если попытаетесь импортировать экспорт по умолчанию так же, как и именованный экспорт! Эта диаграмма поможет вам отслеживать:

/*
Синтаксис	       Экспортное заявление	                  Заявление об импорте
По умолчанию     export default function Button() {}    import Button from './Button.js';
Именованный	     export function Button() {}	          import { Button } from './Button.js';
*/

// Когда вы пишете импорт по умолчанию, вы можете указать любое имя после import. Например, import Banana from './Button.js' вместо этого вы можете написать, и он все равно предоставит вам тот же экспорт по умолчанию. Напротив, при именованном импорте имя должно совпадать с обеих сторон. Вот почему их называют именованным импортом!

// Люди часто используют экспорт по умолчанию, если файл экспортирует только один компонент, и используют именованный экспорт, если он экспортирует несколько компонентов и значений. Независимо от того, какой стиль кодирования вы предпочитаете, всегда давайте осмысленные имена функциям вашего компонента и файлам, которые их содержат. Использование компонентов без имен, таких как export default () => {}, не рекомендуется, поскольку они усложняют отладку.
//* ГЛУБОКОЕ ПОГРУЖЕНИЕ (Экспорт по умолчанию и именованный экспорт)

//# Экспорт и импорт нескольких компонентов из одного файла