//# script (Скрипт в html) (script: "сценарий")
/*
- Как и CSS-стили, скрипты можно прописать внутри кода страницы, либо добавить как внешний документ по ссылке.
- Теги <script> можно располагать в любом месте в заголовке <head>...</head> или теле <body>...</body> HTML-документа. Но лучше всего добавлять их в самый конец перед закрывающим тегом </body>.
- Лучше добавлять скрипты из внешнего файла. Это поможет быстро добавлять одинаковые функции на разные страницы или сайты, а также редактировать и контролировать всё в одном месте. Пользователю это поможет ускорить загрузку страницы, так как файл со скриптами сохранится на компьютере при первой загрузке.
- Динамически вставленный <script> (например, вставленный при помощи document.createElement) по умолчанию загружается браузером асинхронно.
*/

//# noscript (Покажет контент, когда отключен js) (script: "сценарий")
/*
- Тег <noscript> используется для предоставления альтернативного контента пользователям, у которых отключены скрипты в браузере или браузер их не поддерживает. В остальных случаях браузер игнорирует этот тег и всё, что располагается внутри него.
- <noscript> может использоваться как в <head>, так и в <body>. При использовании внутри <head> тег <noscript> может содержать только теги <link>, <style> и <meta>.
- У <noscript> нет уникальных атрибутов, применяются все глобальные атрибуты. Атрибуты для браузерных событий поддерживаются, но не применяются, так как <noscript> используется, когда отсутствует поддержка JavaScript.
*/

//# пример
//* script
<script src="external.js"></script>;

//* noscript
<>
  <script src="external.js"></script>
  <noscript>Прости, твой браузер не поддерживает JavaScript</noscript>
</>;

//# async
/*
- Скрипт выполняется полностью асинхронно. Это означает, что файл будет выполняться без ожидания загрузки и отображения веб-страницы. При обнаружении <script async src="..."> браузер не останавливает обработку страницы, а спокойно работает дальше. Когда скрипт будет загружен – он выполнится.
- Если async не указать, то скрипты будут грузиться по очереди. Этот атрибут работает только когда скрипт задаётся внешним файлом.
- Async хорош для независимых скриптов, например счётчиков и рекламы, порядок выполнения которых не играет роли.
- Первым выполнится тот скрипт, который быстрее загрузится.
*/
<script src="script.js" async></script>;

//# defer
/*
- Указывает браузеру что скрипт должен выполняться после разбора документа, но до события DOMContentLoaded.
- Скрипты с атрибутом defer будут предотвращать запуск события DOMContentLoaded до тех пор, пока скрипт не загрузится полностью и не завершится его инициализация.
- Первым всегда выполнится script1.js, который подключён раньше. Даже если script2.js загрузится раньше, он будет выполнен после первого скрипта.
- На практике defer используется для скриптов, которым требуется доступ ко всему DOM-дереву или если важен их порядок выполнения.
*/
<script src="script.js" defer></script>;

//# src
// Указывает путь к файлу со скриптами. Это может быть полный URL-адрес файла или относительный адрес, например, src="/scripts/browser.js". Файл должен иметь расширение .js. Когда указываешь src, не пиши ничего внутри <script>...</script>. Если атрибут src установлен, содержимое тега script будет игнорироваться.
<script src="script.js" async></script>;

//# type (устарел)
// Старый стандарт HTML, HTML4, требовал наличия этого атрибута в теге <script>. Обычно он имел значение type="text/javascript". На текущий момент этого больше не требуется.

//# type="module"
// Используется для JavaScript-модулей.
<script type="module" src="script1.js"></script>;
