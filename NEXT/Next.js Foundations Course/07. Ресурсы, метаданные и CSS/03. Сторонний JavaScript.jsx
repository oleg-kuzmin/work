//# Сторонний JavaScript
// Сторонний JavaScript — это любые сценарии, добавленные из стороннего источника. Обычно сторонние скрипты включаются для внедрения на сайт новых функций, которые не нужно писать с нуля, таких как аналитика, реклама и виджеты поддержки клиентов.

//# Добавление стороннего JavaScript
// Давайте углубимся в то, как добавить сторонний скрипт на страницу Next.js.

// Откройте pages/posts/first-post.js в редакторе и найдите следующие строки:
<Head>
  <title>First Post</title>
</Head>;

// Помимо метаданных, внутри <head> страницы обычно добавляются сценарии, которые необходимо загрузить и выполнить как можно скорее. Используя обычный HTML- <script> элемент, внешний скрипт можно добавить следующим образом:
<Head>
  <title>First Post</title>
  <script src="https://connect.facebook.net/en_US/sdk.js" />
</Head>;

// Этот скрипт содержит Facebook SDK, который обычно используется для внедрения социальных плагинов Facebook и других функций. Хотя этот подход работает, включение сценариев таким образом не дает четкого представления о том, когда он будет загружаться по отношению к другому коду JavaScript, полученному на той же странице. Если конкретный скрипт блокирует рендеринг и может задерживать загрузку содержимого страницы, это может существенно повлиять на производительность.

//# Использование компонента скрипта
// next/script является расширением элемента <script> и оптимизируется при загрузке и выполнении дополнительных сценариев.

// В том же файле добавьте "import Script from next/script" в начале файла:
import Script from 'next/script';

// Теперь обновите компонент FirstPost, чтобы включить его Script:
export default function FirstPost() {
  return (
    <>
      <Head>
        <title>First Post</title>
      </Head>
      <Script
        src="https://connect.facebook.net/en_US/sdk.js"
        strategy="lazyOnload"
        onLoad={() => console.log(`script loaded correctly, window.FB has been populated`)}
      />
      <h1>First Post</h1>
      <h2>
        <Link href="/">← Back to home</Link>
      </h2>
    </>
  );
}

/*
Обратите внимание, что в компоненте Script определено несколько дополнительных свойств:
- strategy контролирует, когда должен загружаться сторонний скрипт. Значение lazyOnload указывает Next.js лениво загружать этот конкретный скрипт во время простоя браузера.
- onLoad используется для запуска любого кода JavaScript сразу после завершения загрузки сценария. В этом примере мы выводим на консоль сообщение о том, что скрипт загрузился правильно.
*/

// Попробуйте зайти на страницу http://localhost:3000/posts/first-post. Используя инструменты разработчика вашего браузера, вы должны увидеть сообщение выше, зарегистрированное на Console панели. Кроме того, вы можете запустить его window.FB и убедиться, что скрипт заполнил эту глобальную переменную.

// Примечание. Facebook SDK использовался только в качестве надуманного примера, чтобы показать, как эффективно добавлять сторонние скрипты в ваше приложение. Теперь, когда вы понимаете основы включения сторонних функций в Next.js, вы можете удалить компонент Script в FirstPost прежде чем продолжить.

// Чтобы узнать больше о Script компоненте, ознакомьтесь с документацией.
