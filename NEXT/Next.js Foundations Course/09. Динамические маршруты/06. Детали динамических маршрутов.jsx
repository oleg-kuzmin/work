//# Детали динамических маршрутов
// Вот некоторая важная информация, которую вам следует знать о динамических маршрутах.

//# Получить внешний API или базу данных запросов
// Например getStaticProps, getStaticPathsможет получать данные из любого источника данных. В нашем примере getAllPostIds (который используется getStaticPaths) может быть получена информация из конечной точки внешнего API:

export async function getAllPostIds() {
  // Instead of the file system,
  // fetch post data from an external API endpoint
  const res = await fetch('..');
  const posts = await res.json();
  return posts.map(post => {
    return {
      params: {
        id: post.id,
      },
    };
  });
}

//# Разработка против производства
/*
- В разработке (npm run dev или yarn dev) getStaticPaths запускается при каждом запросе.
- В производстве запускается getStaticPaths во время сборки.
*/

//# fallback
// Напомним, мы вернулись к fallback: false в getStaticPaths. Что это значит?

// Если fallback false, то любые пути, не возвращенные командой, getStaticPaths приведут к появлению страницы 404.

/*
Если fallback true, то поведение getStaticProps меняется:
- Пути, возвращаемые из getStaticPaths будут преобразованы в HTML во время сборки.
- Пути, которые не были созданы во время сборки, не приведут к появлению страницы 404. Вместо этого Next.js будет предоставлять «резервную» версию страницы при первом запросе по такому пути.
- В фоновом режиме Next.js статически сгенерирует запрошенный путь. Последующие запросы по тому же пути будут обслуживать сгенерированную страницу, как и другие страницы, предварительно обработанные во время сборки.
*/

// Если fallbackу становлено значение blocking, то новые пути будут отображаться на стороне сервера с помощью getStaticProps и кэшироваться для будущих запросов, поэтому это происходит только один раз для каждого пути.

// Это выходит за рамки наших уроков, но подробнее вы можете узнать в документации.

//# Всеобъемлющие маршруты
// Динамические маршруты можно расширить, чтобы охватить все пути, добавив три точки (...) внутри скобок. Например:

// pages/posts/[...id].js будет соответствовать /posts/a, но и /posts/a/b, /posts/a/b/c и так далее.

// Если вы сделаете это, в getStaticPaths вы должны вернуть массив в качестве значения ключа, id например:

return [
  {
    params: {
      // Statically Generates /posts/a/b/c
      id: ['a', 'b', 'c'],
    },
  },
  //...
];

// И params.id будет массив в getStaticProps:
export async function getStaticProps({ params }) {
  // params.id will be like ['a', 'b', 'c']
}

// Чтобы узнать больше, ознакомьтесь с документацией по перехвату всех маршрутов.

//# Маршрутизатор
// Если вы хотите получить доступ к маршрутизатору Next.js, вы можете сделать это, импортировав перехватчик useRouter из next/router.

//# 404 страницы
// Чтобы создать собственную страницу 404, создайте pages/404.js. Этот файл создается статически во время сборки.

// pages/404.js
export default function Custom404() {
  return <h1>404 - Page Not Found</h1>;
}

// Чтобы узнать больше, ознакомьтесь с нашей документацией по страницам ошибок.

// На следующем уроке мы поговорим о маршрутах API в Next.js.
