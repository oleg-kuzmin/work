//# Оптимизация изображения
// Согласно веб-альманаху, изображения составляют огромную часть веса страницы типичного веб-сайта и могут оказать значительное влияние на производительность LCP вашего веб-сайта.

/* Компонент Next.js Image расширяет HTML-элемент <img> функциями автоматической оптимизации изображений:
- Оптимизация размера: автоматическая подача изображений правильного размера для каждого устройства с использованием современных форматов изображений, таких как WebP и AVIF.
- Визуальная стабильность: предотвращает автоматическое смещение макета при загрузке изображений.
- Ускоренная загрузка страниц. Изображения загружаются только тогда, когда они попадают в область просмотра, используя встроенную отложенную загрузку браузера с дополнительными заполнителями размытия.
- Гибкость ресурсов: изменение размера изображения по требованию, даже для изображений, хранящихся на удаленных серверах.
*/

// Узнайте больше о том, как использовать next/image - https://www.youtube.com/watch?v=IU_qq_c_lKA

//# Использование
//* import Image from 'next/image'

// Затем вы можете определить источник для вашего изображения (локальный или удаленный).

//# Локальные изображения
// Чтобы использовать локальное изображение, импортируйте файлы изображений .jpg, .png или .webp.

// Next.js автоматически определит ширину и высоту вашего изображения на основе импортированного файла. Эти значения используются для предотвращения совокупного смещения макета во время загрузки изображения.

//* app/page.js (добавить export default)
import Image from 'next/image';
import profilePic from './me.png';

function Page() {
  return (
    <Image
      src={profilePic}
      alt="Picture of the author"
      // width={500} automatically provided
      // height={500} automatically provided
      // blurDataURL="data:..." automatically provided
      // placeholder="blur" // Optional blur-up while loading
    />
  );
}

// Предупреждение. Динамическое ожидание import() или require() не поддерживается. Импорт должен быть статическим, чтобы его можно было проанализировать во время сборки.

//# Удаленные изображения
// Чтобы использовать удаленное изображение, свойство src должно быть строкой URL.

// Поскольку Next.js не имеет доступа к удаленным файлам во время процесса сборки, вам придется вручную указать ширину, высоту и дополнительные реквизиты BlurDataURL.

// Атрибуты ширины и высоты используются для определения правильного соотношения сторон изображения и предотвращения смещения макета при загрузке изображения. Ширина и высота не определяют отображаемый размер файла изображения.

//* app/page.js (добавить export default)
import Image from 'next/image';

function Page() {
  return (
    <Image src="https://s3.amazonaws.com/my-bucket/profile.png" alt="Picture of the author" width={500} height={500} />
  );
}

// Чтобы безопасно оптимизировать изображения, определите список поддерживаемых шаблонов URL-адресов в файле next.config.js. Будьте как можно более конкретными, чтобы предотвратить злонамеренное использование. Например, следующая конфигурация будет разрешать изображения только из определенного сегмента AWS S3:

//* next.config.js
module.exports = {
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 's3.amazonaws.com',
        port: '',
        pathname: '/my-bucket/**',
      },
    ],
  },
};

// Если вы хотите использовать относительные URL-адреса для источника изображения, используйте loader.

//# Домены
// Иногда вам может потребоваться оптимизировать удаленное изображение, но при этом использовать встроенный API оптимизации изображений Next.js. Для этого оставьте для загрузчика настройки по умолчанию и введите абсолютный URL-адрес для свойства Image src.

// Чтобы защитить ваше приложение от злоумышленников, вы должны определить список имен удаленных хостов, которые вы собираетесь использовать с компонентом next/image.

//# Loaders
// Обратите внимание, что в приведенном выше примере для локального изображения указан частичный URL-адрес («/me.png»). Это возможно благодаря архитектуре loader.

// Loader — это функция, которая генерирует URL-адреса вашего изображения. Он изменяет предоставленный источник и генерирует несколько URL-адресов для запроса изображения разных размеров. Эти несколько URL-адресов используются при автоматической генерации набора источников, поэтому посетителям вашего сайта будет предоставлено изображение, размер которого соответствует их области просмотра.

// Загрузчик по умолчанию для приложений Next.js использует встроенный API оптимизации изображений, который оптимизирует изображения из любого места в Интернете, а затем обслуживает их непосредственно с веб-сервера Next.js. Если вы хотите передавать изображения непосредственно с CDN или сервера изображений, вы можете написать собственную функцию загрузчика с помощью нескольких строк JavaScript.

// Вы можете определить загрузчик для каждого изображения с помощью свойства loader или на уровне приложения с помощью конфигурации loaderFile.

//# Приоритет
// Вам следует добавить свойство priority к изображению, которое будет элементом Largest Contentful Paint (LCP) для каждой страницы. Это позволяет Next.js устанавливать особый приоритет загрузки изображения (например, с помощью тегов предварительной загрузки или подсказок по приоритету), что приводит к значительному увеличению LCP.

// Элемент LCP обычно представляет собой самый большой блок изображения или текста, видимый в области просмотра страницы. При запуске следующей разработки вы увидите предупреждение консоли, если элементом LCP является <Image> без свойства приоритета.

// Определив образ LCP, вы можете добавить свойство следующим образом:

//* app/page.js (добавить export default)
import Image from 'next/image';
import profilePic from '../public/me.png';

function Page() {
  return <Image src={profilePic} alt="Picture of the author" priority />;
}

//# Размер изображения
// Один из способов, которым изображения чаще всего снижают производительность, — это сдвиг макета, когда изображение перемещает другие элементы на странице при загрузке. Эта проблема с производительностью настолько раздражает пользователей, что у нее есть свой собственный Core Web Vital, называемый накопительным макетом. Сдвиг. Чтобы избежать изменений макета на основе изображений, нужно всегда изменять размер изображений. Это позволяет браузеру зарезервировать достаточно места для изображения перед его загрузкой.

/* Поскольку next/image спроектирован так, чтобы гарантировать хорошие результаты производительности, его нельзя использовать таким образом, чтобы это способствовало изменению макета, и его размер должен быть задан одним из трех способов:
1. Автоматически, используя статический импорт (import profilePic from './me.png')
2. Явно, включая свойства width и height.
3. Неявно, используя fill(заливку), которая заставляет изображение расширяться, чтобы заполнить родительский элемент.
*/

/* Что делать, если я не знаю размера своих изображений?
Если вы получаете доступ к изображениям из источника, не зная их размеров, вы можете сделать несколько вещей:

- Используйте fill
Свойство fill позволяет изменять размер вашего изображения в соответствии с его родительским элементом. Рассмотрите возможность использования CSS, чтобы предоставить родительскому элементу изображения пространство на странице по sizes, чтобы оно соответствовало любым точкам останова медиа-запроса. Вы также можете использовать object-fit с fill, contain или cover и object-position, чтобы определить, как изображение должно занимать это пространство.

- Нормализуйте ваши изображения
Если вы обслуживаете изображения из источника, которым вы управляете, рассмотрите возможность изменения конвейера изображений, чтобы нормализовать изображения до определенного размера.

- Измените вызовы API
Если ваше приложение получает URL-адреса изображений с помощью callback API (например, CMS), вы можете изменить вызов API, чтобы он возвращал размеры изображения вместе с URL-адресом.
*/

// Если ни один из предложенных методов не подходит для изменения размера изображений, компонент next/image разработан так, чтобы хорошо работать на странице вместе со стандартными <img> элементами.

//# Стиль
/* Стилизация компонента Image аналогична стилизации обычного элемента <img>, но следует учитывать несколько рекомендаций:

1. Используйте className или style, не styled-jsx
- В большинстве случаев мы рекомендуем использовать свойство className. Это может быть импортированный модуль CSS, глобальная таблица стилей и т. д.
- Вы также можете использовать свойство style для назначения встроенных стилей.
- Вы не можете использовать styled-jsx, поскольку его область действия ограничена текущим компонентом (если вы не пометите стиль как глобальный).

2. При использовании fill родительский элемент должен иметь position: relative.
- Это необходимо для правильного рендеринга элемента изображения в этом режиме layout.

3. При использовании fill родительский элемент должен иметь display: block.
- Это значение по умолчанию для элементов <div>, но его следует указать иначе.
*/

//# Пример Responsive (добавить export default)
import Image from 'next/image';
import mountains from '../public/mountains.jpg';

function Responsive() {
  return (
    <div style={{ display: 'flex', flexDirection: 'column' }}>
      <Image
        alt="Mountains"
        // Импорт изображения автоматически устанавливает ширину и высоту
        src={mountains}
        sizes="100vw"
        // Сделать изображение отображаемым на всю ширину
        style={{
          width: '100%',
          height: 'auto',
        }}
      />
    </div>
  );
}

//# Пример Fill Container (добавить export default)
import Image from 'next/image';
import mountains from '../public/mountains.jpg';

function Fill() {
  return (
    <div
      style={{
        display: 'grid',
        gridGap: '8px',
        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',
      }}
    >
      <div style={{ position: 'relative', height: '400px' }}>
        <Image
          alt="Mountains"
          src={mountains}
          fill
          sizes="(min-width: 808px) 50vw, 100vw"
          style={{
            objectFit: 'cover', // cover, contain, none
          }}
        />
      </div>
      {/* And more images in the grid... */}
    </div>
  );
}

//# Пример Background Image (добавить export default)
import Image from 'next/image';
import mountains from '../public/mountains.jpg';

function Background() {
  return (
    <Image
      alt="Mountains"
      src={mountains}
      placeholder="blur"
      quality={100}
      fill
      sizes="100vw"
      style={{
        objectFit: 'cover',
      }}
    />
  );
}

// Примеры компонента изображения, используемого с различными стилями - https://image-component.nextjs.gallery/

//# Конфигурация
// Компонент next/image и Next.js Image Optimization API можно настроить в файле next.config.js. Эти конфигурации позволяют включать удаленные изображения, определять пользовательские точки останова для изображений, изменять поведение кэширования и многое другое.

