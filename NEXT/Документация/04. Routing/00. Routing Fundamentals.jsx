//# Основы маршрутизации
// Основой любого приложения является маршрутизация. Эта страница познакомит вас с фундаментальными концепциями маршрутизации в Интернете и с тем, как управлять маршрутизацией в Next.js.

//# Терминология
/* Во-первых, вы увидите, что эти термины используются в документации. Вот краткий справочник:

Tree (Дерево): соглашение для визуализации иерархической структуры. Например, дерево компонентов с родительскими и дочерними компонентами, структура папок и т. д.

Subtree (Поддерево): часть дерева, начинающаяся с нового корня (первый) и заканчивающаяся листьями (последний).

Root (Корень): первый узел в дереве или поддереве, например root layout.

Leaf (Лист): узлы в поддереве, у которых нет дочерних элементов, например последний сегмент URL-пути.

URL Segment (Сегмент URL): часть URL-пути, разделенная косой чертой.

URL Path (URL-путь): часть URL-адреса, идущая после домена (состоящая из сегментов).

<Tree>
  <Subtree>
    <Root /blog>
      <Leaf /blog/[slug] />
    <Root /blog>
  </Subtree>

  <Subtree>
    <Root /dashboard>
      <Leaf /dashboard/analytics />
      </dashboard/settings>
        <Leaf dashboard/settings/password />
        <Leaf dashboard/settings/propfile />
      </dashboard/settings>
    <Root /dashboard>
  </Subtree>
</Tree>

acme.com/dashboard(Сегмент URL)/settings(Сегмент URL)
/dashboard/settings - (URL-путь)
*/

//# The App Router
// В версии 13 Next.js представлен новый App Router, созданный на основе серверных компонентов React, который поддерживает общие layouts, вложенную маршрутизацию, состояния загрузки, обработку ошибок и многое другое.

// App Router работает в новом каталоге с именем app. Каталог app работает вместе с каталогом pages, обеспечивая постепенное внедрение. Это позволяет вам настроить некоторые маршруты вашего приложения на новое поведение, сохраняя при этом другие маршруты в каталоге pages для предыдущего поведения. Если ваше приложение использует каталог pages, см. также документацию Pages Router.

// Полезно знать: Маршрутизатор App Router имеет приоритет над Маршрутизатором Pages Router. Маршруты между каталогами не должны разрешаться по одному и тому же URL-пути и приведут к ошибке во время сборки, чтобы предотвратить конфликт.

// По умолчанию компоненты внутри app — это серверные компоненты React. Это оптимизация производительности, позволяющая легко их внедрить, а также использовать клиентские компоненты.

//# Роли папок и файлов
/* Next.js использует маршрутизатор на основе файловой системы, где:
- Папки используются для определения маршрутов. Маршрут — это единый путь вложенных папок, следующий по иерархии файловой системы от корневой папки до конечной папки, содержащей файл page.js.
- Файлы используются для создания пользовательского интерфейса, отображаемого для сегмента маршрута.
*/

//# Сегменты маршрута
// Каждая папка в маршруте представляет собой сегмент маршрута. Каждый сегмент маршрута сопоставляется с соответствующим сегментом в пути URL.

//# Вложенные маршруты
// Чтобы создать вложенный маршрут, вы можете вкладывать папки друг в друга. Например, вы можете добавить новый маршрут "/dashboard/settings", вложив две новые папки в каталог app.

/* Маршрут /dashboard/settings состоит из трех сегментов:
- /         (Root segment)
- dashboard (Segment)
- settings  (Leaf segment)
*/

//# Соглашение о файлах
/* Next.js предоставляет набор специальных файлов для создания пользовательского интерфейса с определенным поведением во вложенных маршрутах:

layout	      Общий пользовательский интерфейс для сегмента и его дочерних элементов
page	        Уникальный пользовательский интерфейс маршрута и возможность сделать маршруты общедоступными
loading	      Загрузка пользовательского интерфейса для сегмента и его дочерних элементов
not-found	    Не найден пользовательский интерфейс для сегмента и его дочерних элементов
error	Error   Пользовательский интерфейс ошибок для сегмента и его дочерних элементов
global-error	Глобальный интерфейс ошибок
route	        Конечная точка API на стороне сервера
template	    Специализированный переработанный интерфейс layout
default	      Резервный пользовательский интерфейс для параллельных маршрутов
*/

// Полезно знать: расширения .js, .jsx или .tsx можно использовать для специальных файлов.

//# Иерархия компонентов
/* Компоненты React, определенные в специальных файлах сегмента маршрута, отображаются в определенной иерархии:
- layout.js
- template.js
- error.js (React граница ошибки)
- loading.js (React ожидание)
- not-found.js (React граница ошибки)
- page.js or nested layout.js
*/

<Layout>
  <Template>
    <ErrorBoundary fallback={<Error>error.js</Error>}>
      <Suspense fallback={<Loading>loading.js</Loading>}>
        <ErrorBoundary fallback={<NotFound>not-found.js</NotFound>}>
          <Page>Сама страница</Page>
        </ErrorBoundary>
      </Suspense>
    </ErrorBoundary>
  </Template>
</Layout>;

// Во вложенном маршруте компоненты сегмента будут вложены в компоненты его родительского сегмента.

//# Colocation
// Помимо специальных файлов, у вас есть возможность размещать свои собственные файлы (например, компоненты, стили, тесты и т. д.) внутри папок каталога app.

/*
app
  components
    button.js (Not Routable)
  lib
    constants.js (Not Routable)
  dashboard
    page.js (Routable)
    nav.js (Not Routable)
  api
    route.js (Routable)
    db.js (Not Routable)
*/

//# Расширенные шаблоны маршрутизации
/* App Router также предоставляет набор соглашений, которые помогут вам реализовать более сложные шаблоны маршрутизации. К ним относятся:

- Parallel Routes (Параллельные маршруты): позволяют одновременно отображать две или более страницы в одном представлении, по которым можно перемещаться независимо. Вы можете использовать их для разделенных представлений, имеющих собственную вложенную навигацию. Например. Панели мониторинга.
- Intercepting Routes (Перехват маршрутов): позволяет перехватить маршрут и показать его в контексте другого маршрута. Вы можете использовать их, когда важно сохранить контекст текущей страницы. Например. Просмотр всех задач при редактировании одной задачи или расширении фотографии в ленте.
*/

// Эти шаблоны позволяют создавать более богатые и сложные пользовательские интерфейсы, демократизируя функции, которые исторически было сложно реализовать небольшим командам и отдельным разработчикам.
