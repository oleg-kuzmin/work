//# Параллельные маршруты
// Параллельная маршрутизация позволяет одновременно или условно отображать одну или несколько страниц в одном макете. Для высокодинамичных разделов приложения, таких как информационные панели и каналы социальных сайтов, параллельная маршрутизация может использоваться для реализации сложных шаблонов маршрутизации.

// Например, вы можете одновременно отображать страницы team и analytics.

/*
app
  @team
    page.js
  @analytics
    page.js
  layout.js
  page.js
*/

//* layout.js
function layout(props) {
  return (
    <>
      {props.children}
      {props.team}
      {props.analytics}
    </>
  );
}

// Параллельная маршрутизация позволяет определять независимые состояния ошибок и загрузки для каждого маршрута, поскольку они передаются независимо.

/*
app
  @team
    page.js
    error.js
    loading.js
  @analytics
    page.js
    error.js
    loading.js
  layout.js
*/

// Параллельная маршрутизация также позволяет условно отображать слот на основе определенных условий, например состояния аутентификации. Это позволяет полностью отделить код для одного и того же URL-адреса.

//* layout.js
import { getUser } from '@/lib/auth';

function layout({ dashboard, login }) {
  const isLoggedIn = getUser();
  return isLoggedIn ? dashboard : login;
}

//# Соглашение
// Параллельные маршруты создаются с использованием именованных слотов. Слоты определяются с помощью соглашения @folder и передаются в макет того же уровня, что и реквизиты.

// Слоты не являются сегментами маршрута и не влияют на структуру URL. Путь к файлу /@team/members будет доступен по адресу /members.

// Например, следующая файловая структура определяет два явных слота: @analytics и @team.

/*
app
  @analytics
    page.js
  @team
    page.js
  layout.js
  page.js
*/

// Приведенная выше структура папок означает, что компонент в app/layout.js теперь принимает props слотов @analytics и @team и может отображать их параллельно вместе с реквизитом children:

//* app/layout.js
function Layout(props) {
  return (
    <>
      {props.children}
      {props.team}
      {props.analytics}
    </>
  );
}

// Полезно знать: свойство children — это неявный слот, который не нужно сопоставлять с папкой. Это означает, что app/page.js эквивалентен app/@children/page.js.
