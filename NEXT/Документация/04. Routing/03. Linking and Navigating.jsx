//# Ссылки и навигация
/* Существует два способа навигации между маршрутами в Next.js:
- Использование компонента <Link>
- Использование хука useRouter
*/

// На этой странице будет описано, как использовать <Link>, useRouter(), и более подробно описывается, как работает навигация.

//# Компонент <Link>
// <Link> — это встроенный компонент, который расширяет HTML-тег <a>, обеспечивая предварительную выборку и навигацию между маршрутами на стороне клиента. Это основной способ навигации между маршрутами в Next.js.

// Вы можете использовать его, импортировав его из next/link и передав компоненту свойство href:

//* app/page.js
import Link from 'next/link';

function Page() {
  return <Link href="/dashboard">Dashboard</Link>;
}

// Есть и другие дополнительные реквизиты, которые вы можете передать в <Link>. Дополнительную информацию см. в API Reference.

//# Связывание с динамическими сегментами
// При связывании с динамическими сегментами вы можете использовать template и шаблонные строки для создания списка ссылок. Например, чтобы создать список сообщений в блоге:

//* app/blog/PostList.js
import Link from 'next/link';

function PostList({ posts }) {
  return (
    <ul>
      {posts.map(post => (
        <li key={post.id}>
          <Link href={`/blog/${post.slug}`}>{post.title}</Link>
        </li>
      ))}
    </ul>
  );
}

//# Проверка активных ссылок
// Вы можете использовать usePathname(), чтобы определить, активна ли ссылка. Например, чтобы добавить класс к активной ссылке, вы можете проверить, соответствует ли текущий путь href ссылки:

//* app/ui/Navigation.js
('use client');

import { usePathname } from 'next/navigation';
import Link from 'next/link';

export function Navigation({ navLinks }) {
  const pathname = usePathname();

  return (
    <>
      {navLinks.map(link => {
        const isActive = pathname === link.href;

        return (
          <Link className={isActive ? 'text-blue' : 'text-black'} href={link.href} key={link.name}>
            {link.name}
          </Link>
        );
      })}
    </>
  );
}

//# Прокрутка до id
// По умолчанию маршрутизатор приложений Next.js выполняет прокрутку к началу нового маршрута или сохраняет положение прокрутки для навигации вперед и назад.

// Если вы хотите прокрутить до определенного идентификатора при навигации, вы можете добавить свой URL-адрес с хэш-ссылкой # или просто передать хеш-ссылку в свойство href. Это возможно, поскольку <Link> отображается в элемент <a>.

<Link href="/dashboard#settings">Settings</Link>;

//# Отключение восстановления прокрутки
// По умолчанию маршрутизатор приложений Next.js выполняет прокрутку к началу нового маршрута или сохраняет положение прокрутки для навигации вперед и назад. Если вы хотите отключить это поведение, вы можете передать scroll={false} компоненту <Link> или scroll: false для router.push() или router.replace().

//* next/link
<Link href="/dashboard" scroll={false}>
  Dashboard
</Link>;

//* useRouter
import { useRouter } from 'next/navigation';

const router = useRouter();

router.push('/dashboard', { scroll: false });

//# Хук useRouter()
// Хук useRouter позволяет программно изменять маршруты.

// Этот хук можно использовать только внутри клиентских компонентов и импортировать из next/navigation.

//* app/page.js
('use client');

import { useRouter } from 'next/navigation';

export default function Page() {
  const router = useRouter();

  return (
    <button type="button" onClick={() => router.push('/dashboard')}>
      Dashboard
    </button>
  );
}

// Рекомендация: используйте компонент <Link> для навигации между маршрутами, если у вас нет особых требований для использования useRouter.

//# Как работает маршрутизация и навигация
// App Router использует гибридный подход для маршрутизации и навигации. На сервере код вашего приложения автоматически разделяется по сегментам маршрута. А на клиенте Next.js предварительно выбирает и кэширует сегменты маршрута. Это означает, что когда пользователь переходит к новому маршруту, браузер не перезагружает страницу, а перерисовываются только те сегменты маршрута, которые изменились, что улучшает удобство навигации и производительность.

//# 1. Prefetching
// Предварительная выборка — это способ предварительной загрузки маршрута в фоновом режиме до того, как пользователь его посетит.

/*
В Next.js существует два способа предварительной выборки маршрутов:
- Компонент <Link>: маршруты автоматически выбираются заранее, когда они становятся видимыми в области просмотра пользователя. Предварительная загрузка происходит при первой загрузке страницы или когда она появляется в поле зрения при прокрутке.
- router.prefetch(): перехват useRouter можно использовать для программной предварительной выборки маршрутов.
*/

/*
Поведение предварительной выборки <Link> различно для статических и динамических маршрутов:
- Статические маршруты: по умолчанию для предварительной выборки установлено значение true. Весь маршрут предварительно загружается и кэшируется.
- Динамические маршруты: предварительная выборка по умолчанию автоматическая. Только общий макет сохраняется до тех пор, пока первый файл loading.js не будет предварительно загружен и кэширован на 30 секунд. Это снижает стоимость получения всего динамического маршрута и означает, что вы можете отображать мгновенное состояние загрузки для лучшей визуальной обратной связи с пользователями.
*/

// Вы можете отключить предварительную выборку, установив для свойства prefetch значение false.

// Хорошо знать: Предварительная выборка не включена в development, только в production.

//# 2. Caching
// Next.js имеет кэш на стороне клиента в памяти, называемый кэшем маршрутизатора. Когда пользователи перемещаются по приложению, полезная нагрузка компонента React Server, состоящая из заранее выбранных сегментов маршрутов и посещенных маршрутов, сохраняется в кеше.

// Это означает, что при навигации кеш используется максимально повторно, вместо того, чтобы делать новый запрос к серверу — повышение производительности за счет уменьшения количества запросов и передаваемых данных.

//# 3. Partial Rendering