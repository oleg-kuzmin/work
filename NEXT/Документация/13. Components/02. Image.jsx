//# <Image>
// Этот справочник по API поможет вам понять, как использовать реквизиты и параметры конфигурации, доступные для компонента изображения.

//* app/page.js (добавить export default)
import Image from 'next/image';

function Page() {
  return <Image src="/profile.png" width={500} height={500} alt="Picture of the author" />;
}

//# Props
/* Вот краткий обзор реквизитов, доступных для компонента изображения:
Prop	            Example	                            Type	          Required
src	              src="/profile.png"	                String	        Yes
width	            width={500}	                        Integer (px)	  Yes
height	          height={500}	                      Integer (px)	  Yes
alt	              alt="Picture of the author"	        String	        Yes
loader	          loader={imageLoader}	              Function	      -
fill	            fill={true}	                        Boolean	        -
sizes	            sizes="(max-width: 768px) 100vw"	  String	        -
quality	          quality={80}	                      Integer (1-100)	-
priority	        priority={true}	                    Boolean	        -
placeholder	      placeholder="blur"	                String	        -
style	            style={{objectFit: "contain"}}	    Object	        -
onLoadingComplete	onLoadingComplete={img => done())}	Function	      -
onLoad	          onLoad={event => done())}	          Function	      -
onError	          onError(event => fail()}	          Function	      -
loading	          loading="lazy"	                    String	        -
blurDataURL	      blurDataURL="data:image/jpeg..."	  String	        -
*/

//# Обязательные props (добавить export default)
//* app/page.js (добавить export default)
import Image from 'next/image';

function Page() {
  return (
    <div>
      <Image src="/profile.png" width={500} height={500} alt="Picture of the author" />
    </div>
  );
}

//# src (Обязательные props)
/* Должно быть одно из следующих:
- Статически импортированный файл изображения.
- Строка пути. Это может быть либо абсолютный внешний URL-адрес, либо внутренний путь в зависимости от свойства loader.
*/

// При использовании внешнего URL-адреса его необходимо добавить в remotePatterns в файле next.config.js.

//# width (Обязательные props)
// Свойство width представляет визуализированную ширину в пикселях, поэтому оно влияет на размер изображения.
// Обязательно, за исключением статически импортированных изображений или изображений со свойством fill.

//# height (Обязательные props)
// Свойство height представляет визуализированную высоту в пикселях, поэтому оно влияет на размер изображения.
// Обязательно, за исключением статически импортированных изображений или изображений со свойством fill.

//# alt (Обязательные props)
// Свойство alt используется для описания изображения для программ чтения с экрана и поисковых систем. Это также резервный текст, если изображения отключены или при загрузке изображения возникает ошибка.

// Он должен содержать текст, который мог бы заменить изображение, не меняя смысла страницы. Оно не предназначено для дополнения изображения и не должно повторять информацию, уже представленную в подписях над или под изображением.

// Если изображение носит чисто декоративный характер или не предназначено для пользователя, свойство alt должно быть пустой строкой (alt="").

//# Опциональные props
// Компонент <Image /> принимает ряд дополнительных свойств помимо обязательных. В этом разделе описаны наиболее часто используемые свойства компонента Image.

//# loader (Опциональные props)
// Пользовательская функция, используемая для разрешения URL-адресов изображений.

/* loader — это функция, возвращающая строку URL-адреса изображения при следующих параметрах:
- src
- width
- quality
*/

// Вот пример использования пользовательского loader:

//* app/page.js (добавить export default)
('use client');

import Image from 'next/image';

const imageLoader = ({ src, width, quality }) => {
  return `https://example.com/${src}?w=${width}&q=${quality || 75}`;
};

function Page() {
  return <Image loader={imageLoader} src="me.png" alt="Picture of the author" width={500} height={500} />;
}

// Полезно знать: использование таких props, как loader, которые принимают функцию, требует использования клиентских компонентов для реализации предоставленной функции.

// Альтернативно вы можете использовать конфигурацию loaderFile в next.config.js для настройки каждого экземпляра next/image в вашем приложении без передачи реквизита.

//# fill (Опциональные props)
// fill={true} // {true} | {false}

// Логическое значение, которое заставляет изображение заполнять родительский элемент, что полезно, когда ширина и высота неизвестны.

// Родительскому элементу необходимо присвоить position: "relative", position: "fixed" или position: "absolute".

// По умолчанию элементу img автоматически будет присвоен position: "absolute".

// Если к изображению не применены стили, оно растянется по размеру контейнера. Вы можете предпочесть установить object-fit: "contain" для изображения, которое имеет почтовый ящик, чтобы соответствовать контейнеру и сохранять соотношение сторон.

// Альтернативно, object-fit: «cover» приведет к тому, что изображение заполнит весь контейнер и будет обрезано, чтобы сохранить соотношение сторон. Чтобы это выглядело правильно, родительскому элементу должен быть присвоен стиль overflow: "hidden".

//# sizes (Опциональные props)
// Строка, похожая на медиа-запрос, которая предоставляет информацию о том, насколько шириной будет изображение в различных точках останова. Значение размеров будет сильно влиять на производительность изображений, использующих fill или стилизованных под адаптивный размер.

/* Свойство размеров служит двум важным целям, связанным с производительностью изображения:

- Во-первых, значение sizes используется браузером для определения размера изображения для загрузки из автоматически сгенерированного набора srcset next/image. Когда браузер делает выбор, он еще не знает размер изображения на странице, поэтому он выбирает изображение того же размера или больше, чем область просмотра. Свойство sizes позволяет сообщить браузеру, что изображение на самом деле будет меньше полноэкранного. Если вы не укажете значение sizes в изображении со свойством fill будет использовано дефолтное значение 100vw (полная ширина экрана).

- Во-вторых, свойство sizes изменяет поведение автоматически сгенерированного значения srcset. Если значение sizes отсутствует, генерируется небольшой srcset, подходящий для изображений фиксированного размера (1x/2x/etc). Если sizes определен - генерируется большой srcset, подходящий для адаптивного изображения (640w/750w/etc). Если свойство sizes включает такие размеры, как 50vw, которые представляют собой процент ширины области просмотра, то набор srcset обрезается, чтобы не включать в себя какие-либо значения, которые слишком малы.
*/

// Например, если вы знаете, что ваш стиль приведет к тому, что изображение будет иметь полную ширину на мобильных устройствах, макет в 2 столбца на планшетах и ​​макет в 3 столбца на настольных компьютерах, вам следует включить свойство размеров, например следующее:

import Image from 'next/image';

function Page() {
  return (
    <div className="grid-element">
      <Image fill src="/example.png" sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" />
    </div>
  );
}

// Sizes в этом примере могут оказать существенное влияние на показатели производительности. Без размеров 33vw изображение, выбранное с сервера, было бы в 3 раза шире, чем необходимо. Поскольку размер файла пропорционален квадрату ширины, без размеров пользователь загрузит изображение, которое в 9 раз больше необходимого.

//# quality (Опциональные props)
// quality={75} // {number 1-100}
// Качество оптимизированного изображения, целое число от 1 до 100, где 100 – наилучшее качество и, следовательно, наибольший размер файла. По умолчанию 75.

//# priority (Опциональные props)
// priority={false} // {false} | {true}

// Если установлено значение true, изображение будет иметь высокий приоритет и будет предварительно загружено. Отложенная загрузка автоматически отключается для изображений, использующих приоритет.

// Свойство Priority следует использовать для любого изображения, обнаруженного как элемент Largest Contentful Paint (LCP). Возможно, будет целесообразно иметь несколько приоритетных изображений, поскольку разные изображения могут быть элементом LCP для разных размеров области просмотра.

// Следует использовать только в том случае, если изображение видно над сгибом. По умолчанию false.

//# placeholder (Опциональные props)
// placeholder = 'empty' // "empty" | "blur" | "data:image/..."

// Placeholder, который будет использоваться во время загрузки изображения. Возможные значения: размытие, пусто или data:image/.... По умолчанию пусто.

// При размытии в качестве placeholder будет использоваться свойство blurDataURL. Если src является объектом статического импорта, а импортированное изображение имеет формат .jpg, .png, .webp или .avif, то blurDataURL будет автоматически заполнен, за исключением случаев, когда изображение определяется как анимированное.

// Для динамических изображений необходимо указать свойство blurDataURL. Такие решения, как placeholder, могут помочь с генерацией base64.

// Если data:image/..., URL-адрес данных будет использоваться в качестве placeholder во время загрузки изображения.

// Если оно пустое, во время загрузки изображения не будет placeholder, а будет только пустое пространство.

//# Расширенные props
// В некоторых случаях вам может потребоваться более расширенное использование. Компонент <Image /> дополнительно принимает следующие дополнительные свойства.

//# style (Расширенные props)
// Позволяет передавать стили CSS базовому элементу изображения.

//* components/ProfileImage.js (добавить export default)
const imageStyle = {
  borderRadius: '50%',
  border: '1px solid #fff',
};

function ProfileImage() {
  return <Image src="..." style={imageStyle} />;
}

// Помните, что требуемая ширина и высота могут взаимодействовать с вашим стилем. Если вы используете стиль для изменения ширины изображения, вам также следует задать для его высоты значение auto, чтобы сохранить его внутреннее соотношение сторон, иначе ваше изображение будет искажено.

//# onLoadingComplete (Расширенные props)
('use client');
<Image onLoadingComplete={img => console.log(img.naturalWidth)} />;

// Функция обратного вызова, которая вызывается после полной загрузки изображения и удаления placeholder.

// Функция обратного вызова будет вызвана с одним аргументом — ссылкой на базовый элемент <img>.

// Полезно знать: использование таких реквизитов, как onLoadingComplete, которые принимают функцию, требует использования клиентских компонентов для реализации предоставленной функции.

//# onLoad (Расширенные props)
('use client');
<Image onLoad={e => console.log(e.target.naturalWidth)} />;

// Функция обратного вызова, которая вызывается при загрузке изображения.

// Событие загрузки может произойти до того, как placeholder изображения будет удален и изображение будет полностью декодировано. Если вы хотите дождаться полной загрузки изображения, используйте вместо этого onLoadingComplete.

// Полезно знать: использование таких реквизитов, как onLoad, которые принимают функцию, требует использования клиентских компонентов для реализации предоставленной функции.

//# onError (Расширенные props)
('use client');
<Image onError={e => console.error(e.target.id)} />;

// Функция обратного вызова, которая вызывается, если изображение не загружается.

// Полезно знать: использование таких реквизитов, как onError, которые принимают функцию, требует использования клиентских компонентов для сериализации предоставленной функции.

//# loading (Расширенные props)
// loading = 'lazy' // {lazy} | {eager}

// Рекомендация: это свойство предназначено только для расширенных случаев использования. Переключение изображения на загрузку с помощью eager обычно снижает производительность. Вместо этого мы рекомендуем использовать свойство Priority, которое будет предварительно загружать изображение.

// Поведение загрузки изображения. По умолчанию ленивый

// Если lazy, отложите загрузку изображения до тех пор, пока оно не достигнет расчетного расстояния от области просмотра.

// Если eager, немедленно загрузите изображение.

//# blurDataURL (Расширенные props)
// URL-адрес данных, который будет использоваться в качестве изображения-placeholder перед успешной загрузкой исходного изображения. Действует только в сочетании с placeholder="blur".

// Должно быть изображение в кодировке Base64. Оно будет увеличено и размыто, поэтому рекомендуется использовать очень маленькое изображение (10 пикселей или меньше). Использование изображений большего размера в качестве placeholder может снизить производительность вашего приложения.

//# unoptimized (Расширенные props)
// unoptimized = {false} // {false} | {true}

// Если установлено значение true, исходное изображение будет отображаться как есть, без изменения качества, размера или формата. По умолчанию false.

import Image from 'next/image';

const UnoptimizedImage = props => {
  return <Image {...props} unoptimized />;
};

// Начиная с Next.js 12.3.0, это свойство можно назначить всем изображениям, обновив next.config.js следующей конфигурацией:

//* next.config.js
module.exports = {
  images: {
    unoptimized: true,
  },
};

//# Другие props
/* Другие свойства компонента <Image /> будут переданы базовому элементу img, за исключением следующих:
- srcSet. Вместо этого используйте размеры устройств.
- decoding. Это всегда async.
*/
