//* Keyframes простой из 2 кадров
@keyframes rotation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

//* Keyframes из 5 кадров
@keyframes move {
  0% {
    left: 0;
    top: 0;
  }
  25% {
    left: 30px;
    top: 30px;
  }
  50% {
    left: 60px;
    top: 0;
  }
  75% {
    left: 90px;
    top: 30px;
  }
  100% {
    left: 120px;
    top: 0;
  }
}

//* Animation
// Элементу можно присвоить множество анимаций, перечислив их через запятую.
.animation {
  animation: move 2s; // сокращенная запись, порядок свойств неважен
  // Только animation-duration должно быть раньше animation-delay
  animation-name: move; // имя набора кейфреймов
  animation-duration: 2s; // хронометраж анимации - время, за которое анимация проигрывается целиком
  animation-timing-function: ease; // непринуждённо
  animation-timing-function: linear; // линейно
  animation-timing-function: ease-in; // осторожно
  animation-timing-function: ease-out; // отпустить
  animation-timing-function: ease-in-out; // сначала осторожно, потом отпустить
  animation-timing-function: cubic-bezier(1, 0.2, 0.52, 0.46); //
  // Если нужно что-то особенное, переходное поведение можно определить кривой Безье — инструментами, подобными http://cubic-bezier.com
  animation-delay: 1s; // задержка перед стартом анимации, в секундах.
  animation-iteration-count: 3; // сколько раз запустить анимацию, задается целым числом или infinite, чтобы воспроизводить бесконечно
  animation-direction: normal; // направление анимации от начала к концу
  animation-direction: reverse; // направление анимации с конца до начала
  animation-direction: alternate; // направление анимации от начала к концу и обратно
  animation-direction: alternate-reverse; // направление анимации от конца к началу и обратно
  animation-fill-mode: forwards; // после анимации - сохранит элемент в том состоянии, в котором он оказался после выполнения анимации
  animation-fill-mode: backwards; // после анимации - вернёт состояние до начала анимации
  animation-fill-mode: both; // после анимации - сначала установит элементу состояние первого кадра, которое сохраняется до старта, По окончании анимации устанавливается состояние последнего кадра
  animation-play-state: running; // указывает, запущена анимация или нет (запускает анимацию)
  animation-play-state: paused; // указывает, запущена анимация или нет (останавливает анимацию)
  animation-play-state: initial; // исходное состояние элемента на момент загрузки страницы
  animation-play-state: inherit; // унаследовать состояние элемента от родителя
}
