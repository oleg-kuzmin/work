//# transform (Трансформация элемента)
/* Свойство transform используем, когда нам нужно применить к элементу какие-либо трансформации: искажение, поворот, смещение, масштабирование.
- Стоит обратить особое внимание на тот факт, что трансформируемый элемент при трансформациях никак не взаимодействует с соседними элементами. Он как бы «приподнимается» над остальным содержимым. При этом он не уходит из потока документа, и остальные элементы располагаются так, как располагались до применения трансформаций.
- Нельзя трансформировать строчные и табличные элементы.
- Если среди значений есть функция perspective(), то она должна быть первой среди всех значений.
- Если свойство transform имеет значение, отличное от none, то создаётся новый контекст наложения. Это означает, что относительно этого элемента теперь будут позиционироваться все дочерние элементы, у которых position: fixed или position: absolute.
- Чтобы трансформации вдоль оси z работали и выглядели максимально естественно, трансформируемый элемент должен лежать в родителе, которому задано свойство perspective.
- В целом, позиционирование и translate прекрасно сочетаются друг с другом. Позиционирование лучше использовать для изначального расположения элемента на странице, а translate применять, если нужно добавить анимации движения.
- Обратите внимание, что обычное вращение элемента на странице — это вращение относительно оси Z. Если мы хотим вращать элемент относительно других осей, то нужно не забывать про перспективу. С ней повороты относительно X или Y будут выглядеть максимально естественно.
- В последних версиях спецификации появились отдельные CSS-свойства для трансформаций. Это rotate, translate и scale. Если раньше мы писали комплексные трансформации, применяя несколько функций, то теперь каждую трансформацию можем описать отдельным свойством. */

//# значения
.element {




  //* skew (Наклон)
  // Наклонит элемент
  transform: skewX(2); // по оси X
  transform: skewY(2); // по оси Y
  transform: skew(30deg, 40deg); // по осям X, Y

  //* rotate (Поворот)
  // Повернет элемент (в функцию передаём единицы измерения углов)
  rotate: 180deg; // по оси Z
  transform: rotate(30deg); // по оси Z
  transform: rotateX(30deg); // по оси X
  transform: rotateY(30deg); // по оси Y
  transform: rotateZ(30deg); // по оси Z
  transform: rotate3d(30deg); // по осям X, Y, Z

  //* несколько значений
  transform: perspective(500px) translate(10px, 0, 20px) rotateY(3deg);

  //* matrix (Матрица трансформации)
  transform: matrix(1, 2, 3, 4, 5, 6);
  /* Функция, которой можно описать любую трансформацию в плоскости экрана
  1 - изменение масштаба по горизонтали (элемент увеличен вдвое по оси X)
  2 - скос по вертикали (положительное значение поднимает левую половину элемента и опускает правую, отрицательное наоборот)
  3 - скос по горизонтали (положительное значение наклоняет элемент влево, отрицательное вправо)
  4 - изменение масштаба по вертикали (элемент растянут в 5 раз по оси Y)
  5 - сдвиг по оси X в пикселях
  6 - сдвиг по оси Y в пикселях */

  //* perspective (Перспектива)
  // Принимает один параметр - расстояние до точки схождения перспективы. Плоскость экрана принимается за начало координат.
  transform: perspective(500px); // означает, что точка схождения перспективы находится на расстоянии 500px вглубь от плоскости экрана
}
