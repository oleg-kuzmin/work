//# grid-template-rows (Создание строк)
/*
- Свойство, задающее размеры и количество строк грид-раскладки.
- По умолчанию состоит из одной строки, которая занимает все пространство.
- Элементы в грид-контейнере добавляются сверху вниз (↓), образуя новые строки, и заполняются слева направо (→), образуя столбцы.
- Свойство grid-template-rows командует браузеру, во сколько строк выстраивать вложенные элементы. И какого размера должны быть строки.
- В качестве значения указывается то количество размеров, какое количество строк необходимо. Размеры могут указываться в любых доступных единицах измерения. Размеры перечисляются через пробел.
- Можно использовать функцию repeat() для создания строк одного размера.
- Удобно использовать единицу измерения fr, чтобы указать, в каких соотношениях строки разделят свободное место.
- Кроме непосредственного количества строк и их размеров можно задавать и имена для грид-линий, ограничивающих эти строки.
- Свободное пространство рассчитывается после того, как место отдано всем фиксированным размерам.
grid-template-rows: 1fr 200px 1fr (сначала будет создана строка шириной 200 пикселей, а затем свободное пространство — ширина родителя минус 200 пикселей — будет поделено между остальными строками. Каждая будет занимать высоту (100%-200px)/2.
- Для анимации доступны следующие свойства и их значения: Значения свойств grid-template-columns, grid-template-rows, указанные в единицах измерения, процентах или при помощи функции calc() при условии, что анимируются аналогичные значения.
*/

//# значения
.container {
  //* три строки
  grid-template-rows: 100px 100px 100px;

  //* строки с функцией repeat
  grid-template-rows: repeat(5, 100px);
  grid-template-rows: repeat(5, 1fr);
  grid-template-rows: repeat(5, 20%);

  //* auto-fill
  grid-template-rows: repeat(auto-fill, 100px);
  // Свойство auto-fill создаёт пустые строки, чтобы заполнить всё доступное пространство.

  //* auto-fit
  grid-template-rows: repeat(auto-fit, 100px);
  // Значение auto-fit тоже заполняет всё доступное пространство строками, но в отличие от auto-fill схлопывает пустые и отдаёт больше места под заполненные, пустые строки всё ещё существуют, просто с нулевым размером
  grid-template-rows: repeat(auto-fit, minmax(100px, 1fr));
  // резиновая сетка

  //* строки с автоматическим размером
  grid-template-rows: repeat(5, auto);
  // при значении auto размер грид-полос подстраивается под размер грид-элементов так, чтобы уместился самый большой из них, другие элементы поделят между собой оставшееся пространство

  //* строки с названиями
  grid-template-rows: [start] 140px [line2] 250px [line3] 40px [end];
  grid-template-rows: [start] 140px [line2 col2-start] 250px [col2-end end];
  // Каждая линия может иметь больше одного имени. Это похоже на классы в HTML — вы можете задать элементу больше одного класса.

  //* строки с функцией minmax
  grid-template-rows: 100px minmax(100px, 1fr);
  // функция minmax имеет два параметра: минимальный размер min и максимальный max. Можно задавать в пикселях, процентах, фракциях.Трек или элемент с таким размером растягивается и сжимается в пределах этих значений

  grid-template-rows: 100px minmax(min-content, max-content);
  // будет ориентироваться на контент: не ужмётся меньше содержимого, но и не займёт лишнее место, когда контента мало.

  //* строки с max-content
  grid-template-rows: 100px max-content;
  // Будь такой ширины, чтобы вмещать содержимое без переносов и максимально компактно, без свободного пространства по краям. Это удобно для подписей к картинкам. Значение max-content размещает подпись на одной строке без переносов.

  //* строки с min-content
  grid-template-rows: 100px min-content;
  // Стремится перенести всё, что переносится, чтобы содержимое ячейки занимало как можно меньше места. Значение min-content сообщает треку: «Ориентируйся на самый маленький — картинку или слово.

  //* строки с функцией fit-content
  grid-template-rows: 100px fit-content(200px);
  // Предельный размер высоты строки. Строка занимает ширину под размер своего контента.
}
