//# POSITION (ПОЗИЦИОНИРОВАНИЕ)
// Свойство position задаёт способ позиционирования элемента в документе. Совместно со свойствами left, right, top, bottom элементу задаётся его местоположение на странице.

//# ПРИМЕР
.element {
  //* cтатическое позиционирование
  position: static; // (по умолчанию)

  //* относительное позиционирование
  position: relative; // смещается относительно самого себя, ранее занимавшее место остается в потоке
  top: 20px; // от верхней границы блока (приоритет)
  left: 10px; // от левой границы блока (приоритет)
  right: 40px; // от правой границы блока
  bottom: 10px; // от нижней границы блока

  //* фиксированное относительное позиционирование
  position: fixed; // вырывает элемент из потока, смещается относительно окна браузера
  top: 20px; // от верхней границы браузера (приоритет)
  left: 10px; // от левой границы браузера (приоритет)
  right: 40px; // от правой границы браузера
  bottom: 10px; // от нижней границы браузера

  //* абсолютное позиционирование
  position: absolute; // вырывает элемент из потока, смещается относительно родителя с заданным позиционированием (т.е. кроме static), ищет ближайщего родителя, если не найдет расположится относительно body
  top: 20px; // от верхней границы родителя (приоритет)
  left: 10px; // от левой границы родителя (приоритет)
  right: 40px; // от правой границы родителя
  bottom: 10px; // от нижней границы родителя

  //* липкое позиционирование
  position: sticky; // Привязывается (прилипает) к родителю и не может выходить за его пределы, но прокручивается вместе с браузером, смещается относительно родителя с заданным display (кроме block), ищет ближайщего родителя, если не найдет расположится относительно body
  top: 20px; // от верхней границы родителя (при вертикальном скроле)
  bottom: 10px; // от нижней границы родителя (при вертикальном скроле)
  left: 10px; // от левой границы родителя (при горизонтальном скроле)
  right: 40px; // от правой границы родителя (при горизонтальном скроле)
}

//# ОБЩАЯ ИНФОРМАЦИЯ
//* position: static
/* Значение по умолчанию. Статичное позиционирование. Любой элемент, добавленный на страницу, будет иметь это значение и будет расположен в нормальном потоке документа согласно контексту форматирования родительского элемента. Свойства left, right, top, bottom и z-index игнорируются.
- Элемент со значением position: static не является позиционированным элементом. Это важный момент, потому что элементы с любым другим значением свойства position создают внутри себя контекст наложения и становятся опорными. Опорным элементом будем называть такой, относительно которого позиционируются дочерние элементы.*/

//* position: relative
/* Элемент позиционируется так же, как и статичный, но его отображение может быть смещено относительно своего начального положения при помощи свойств left, right, top, bottom. Это смещение чисто визуальное и не затрагивает положение соседних элементов, кроме случая, когда элемент выходит за границы родителя, имеющего возможность прокрутки.*/

//* position: fixed
/* Иногда требуется позиционировать элемент не относительно родителя, а относительно окна браузера вне зависимости от вложенности. Для решения подобной задачи подходит position: fixed. Свойство так же, как и предыдущее, работает с указанием смещения left, right, top, bottom. У такого способа позиционирования есть ряд особенностей:
1) Элемент убирается из основного потока документа. То есть перестаёт влиять на положение окружающих элементов и на размер родителя. Можно представить себе, что элемент уходит на слой выше и перестаёт взаимодействовать со всеми элементами, кроме своих потомков.
2) Элемент позиционируется относительно окна браузера, за исключением случаев, если один из родителей имеет значения свойств transform, perspective или filter, отличные от none. В этом случае блок становится опорным, и позиционирование будет производиться уже относительно него, а не окна браузера.*/

//* position: absolute
/* Способ позиционирования, кажущийся наиболее понятным. Мы просто задаём абсолютное позиционирование и при помощи свойств left, right, top, bottom регулируем положение элемента. Есть ряд особенностей такого позиционирования:
1) Элемент убирается из основного потока документа. То есть перестаёт влиять на положение окружающих элементов и на размер родителя. Можно представить себе, что элемент уходит на слой выше и перестаёт взаимодействовать со всеми элементами, кроме своих потомков.
2) Элемент позиционируется относительно ближайшего позиционированного предка. То есть браузер идёт вверх по дереву элементов и ищет ближайшего опорного родителя. И затем располагает наш элемент относительно этого родителя.
3) Если элемент был частью строчного контекста форматирования, он приобретает блочный контекст форматирования. К нему становится применима блочная модель.
4) Если элемент был блочным и занимал всю ширину своего родителя, то теперь его ширина будет определяться шириной контента.
5) Отступы элемента с position: absolute не схлопываются с отступами соседних элементов.*/

//* position: sticky
/* Элемент позиционируется в нормальном потоке так же, как и статичный, а затем смещается при помощи свойств left, right, top, bottom относительно ближайшего родителя, имеющего прокрутку. Это свойство применяется, когда нам нужно зафиксировать какой-либо элемент не сразу, а при прокрутке родителя до какого-то известного положения. У такого позиционирования есть ряд особенностей:
1) Элемент ведёт себя как элемент с относительным (relative) позиционированием до тех пор, пока его родитель не будет прокручен до определённой границы. Как правило, эта точка совпадает с положением верхней границы нашего элемента, но может быть изменена с использованием свойства top.
2) Элемент остаётся «приклеенным» во время прокрутки родителя до тех пор, пока не «встретит» противоположную границу своего родителя.
- Элемент с position: sticky «прилипает» к экрану при прокрутке, пока не встретится с границей родительского блока.
- Блоки с «липким» позиционированием ведут себя как position: relative и position: fixed одновременно. Пока блок не достиг указанного расстояния от края окна браузера, он ведёт себя как относительно спозиционированный. Когда блок достигнет этой точки, то станет вести себя, как будто мы указали position: fixed. А когда он встретится с противоположным краем родителя, то снова будет вести себя, как position: relative.
- Для блока, который должен быть «липко» позиционирован, указываем position: sticky и позицию относительно окна браузера.
- Если нужный элемент занимает всю высоту родительского блока (если он один в блоке или просто самый высокий среди соседних элементов), то position: sticky не сработает.
- При вертикальном скролле работают только свойства top и bottom, при горизонтальном — left и right.
- Position: sticky можно указать внутри родителя с overflow: scroll или overflow: auto.
- Если элементу указать большее число пикселей, чем позволяет родитель, то элемент сразу встанет к противоположному краю родительского блока, но за пределы блока не выйдет.
- С помощью такого позиционирования удобно делать закреплённую шапку — если она является непосредственным наследником body, то, указав шапке position: sticky, мы получим статичную шапку при загрузке экрана, а при скролле страницы — зафиксированную сверху.*/
