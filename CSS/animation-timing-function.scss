//# animation-timing-function
// При помощи свойства animation-timing-function можно задать, как будет развиваться анимация между ключевыми кадрами: равномерно, или сначала быстро, потом медленно, или по каким-то сложным внутренним законам.

.element {
  animation-timing-function: ease; // по умолчанию
}

//# Значения
//* linear
// Анимация проигрывается равномерно, без колебаний скорости.

//* ease
// Анимация начинается медленно, затем быстро разгоняется и снова замедляется к концу. Значение по умолчанию.

//* ease-in
// Анимация начинается медленно и плавно ускоряется к концу.

//* ease-out
// Анимация начинается быстро и плавно замедляется к концу.

//* ease-in-out
// Анимация начинается и заканчивается медленно, ускоряясь в середине.

//* cubic-bezier(x1, y1, x2, y2)
/* Временная функция, описывающая тип ускорения в виде кривой Безье.
- По оси x располагается временная шкала анимации, а по оси y — прогресс анимации. Это очень мощный инструмент для создания разнообразных анимаций со сложными внутренними законами.
- Значения x1 и x3 должны находиться в диапазоне от 0 до 1 включительно. Задавая значения x2 и x4 меньше 0 или больше 1, можно добиться эффекта пружины.
- Редко когда разработчики пишут эту функцию из головы. Чаще всего используется инструмент визуализации, позволяющий изменять значения и сразу видеть, как будет выглядеть анимация.
- Один из самых популярных инструментов — cubic-bezier.com.
*/

//* step-start
// Задаёт пошаговую анимацию, разбивая её на отрезки, изменения происходят в начале каждого шага.

//* 
