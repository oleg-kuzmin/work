//# grid-template-rows (СТРОКИ)
/*
- Свойство, задающее размеры и количество строк грид-раскладки.
- Свойство grid-template-rows командует браузеру, во сколько строк выстраивать вложенные элементы. И какого размера должны быть строки.
*/

.grid-container {
  display: grid;
  grid-template-rows: 40px auto 40%;
}

//# Значения
/*
- В качестве значения указывается то количество размеров, какое количество строк необходимо. Размеры могут указываться в любых доступных единицах измерения. Размеры перечисляются через пробел.
- Можно использовать функцию repeat() для создания строк одного размера.
- Удобно использовать единицу измерения fr, чтобы указать, в каких соотношениях строки разделят свободное место.
- fr (от fraction — доля, часть) отвечает за свободное пространство внутри грид-контейнера.
- Свободное пространство рассчитывается после того, как место отдано всем фиксированным размерам. К примеру, в коде "grid-template-rows: 1fr 200px 1fr" сначала будет создана строка высотой 200 пикселей, а затем свободное пространство — высота родителя минус 200 пикселей — будет поделено между остальными строками. Каждая будет занимать высоту (100% - 200px) / 2:
*/

//* grid-template-rows: 1fr
// По умолчанию состоит из одной строки, которая занимает все пространство.

//* grid-template-rows: 100px 100px 100px || repeat(3, 100px)
// Три строки по 100px.

//* grid-template-rows: 1fr 1fr 1fr || repeat(3, 1fr)
// Три строки одинакового размера.

//* grid-template-rows: repeat(auto-fill, 100px)
// Свойство auto-fill создаёт пустые строки, чтобы заполнить всё доступное пространство.

//# Значения с именами грид-линий
//* grid-template-rows: [start] 250px [line2] 400px [line3] 600px [end]
// Кроме непосредственного количества строк и их размеров можно задавать и имена для грид-линий, ограничивающих эти строки.

//* grid-template-rows: [start] 140px [line2 col2-start] 250px [col2-end end]
// Каждая строка может иметь больше одного имени. Это чем-то похоже на классы в HTML — вы можете задать элементу больше одного класса. Тут аналогичная ситуация. Например, такой код будет совершенно валиден, у второй и третьей грид-линий строки по два имени.

//# Значения auto-fill или auto-fit
// В тех случаях, когда количество колонок или строк не известно для свойств grid-template-columns и grid-template-rows можно установить значения auto-fill или auto-fit. Оба эти параметра (auto-fill и auto-fit) автоматически добавляют в грид-сетку строки и клонки, но ведут себя немного по-разному.

//* grid-template-rows: repeat(auto-fill, 100px)
// Стремится заполнить строками всё доступное пространство, а когда элементы заканчиваются, создаёт пустые строки, равномерно распределяя доступную область между существующими и «виртуальными» строками.

//* grid-template-rows: repeat(auto-fit, 100px)
// Действует похожим образом, но, схлопывает пустые строки и отдаёт больше места под заполненные. Пустые строки всё ещё существуют, просто с нулевым размером.

//# Другие значения
// max-content - «Будь такой ширины, чтобы вмещать содержимое без переносов и максимально компактно, без свободного пространства по краям».

// min-content - «Ориентируйся на самый маленький — картинку или слово.

// fit-content - Трек с fit-content ориентируется на контент, но всегда стремится к указанному в нём значению. Колонка занимает ширину под размер своего контента. Но она не сможет превзойти значение, указанное в fit-content.

//* grid-template-columns: repeat(auto-fit, minmax(100px, 1fr))
// Резиновая сетка.

//* grid-template-columns: repeat(5, auto)
// Строки с автоматическим размером. При значении auto размер грид-полос подстраивается под размер грид-элементов так, чтобы уместился самый большой из них, другие элементы поделят между собой оставшееся пространство.

//* grid-template-columns: repeat(5, minmax(100px, 1fr))
// Строки с функцией minmax. Функция minmax имеет два параметра: минимальный размер min и максимальный max. Можно задавать в пикселях, процентах, фракциях. Трек или элемент с таким размером растягивается и сжимается в пределах этих значений.

//* grid-template-columns: repeat(5, minmax(min-content, max-content))
// Будет ориентироваться на контент: не ужмётся меньше содержимого, но и не займёт лишнее место, когда контента мало.

//* grid-template-columns: repeat(5, max-content)
// Будь такой высоты, чтобы вмещать содержимое без переносов и максимально компактно, без свободного пространства по краям. Это удобно для подписей к картинкам. Значение max-content размещает подпись на одной строке без переносов.

//* grid-template-columns: repeat(5, min-content)
// Стремится перенести всё, что переносится, чтобы содержимое ячейки занимало как можно меньше места. Значение min-content сообщает треку: «Ориентируйся на самый маленький — картинку или слово.

//* grid-template-columns: repeat(5, fit-content(200px))
// Предельный размер высоты строки. Строка занимает высоту под размер своего контента.
