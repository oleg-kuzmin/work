// Гриды — там, где нужна чёткая структура.
// Например, чтобы создать общую сетку страницы.
// А флексбоксы — для мест, где нужно выравнивание в строке или колонке.
// Например, расположить иконки соцсетей в ряд с равными расстояниями между ними.

// flex-row универсальный класс с единственным свойством. Назначают всем элементам, которым это свойство нужно
.flex-row {
  display: flex;
}

.flex-container {
  margin: auto; // Выравнивание по центру:

  //*ПОРЯДОК ЭЛЕМЕНТОВ И ПЕРЕНОС
  flex-flow: row wrap; // 1 - flex-direction, 2 - flex-wrap
}

.flex-element {
  //* ПОРЯДОК ОТОБРАЖЕНИЯ
  order: 1; // Элемент будет показан раньше элемента со свойством order: 2;
  order: -1; // Элемент будет первым в контейнере, если у других элементов значения положительны или даже не заданы

  //* ВЫРАВНИВАНИЕ КОНКРЕТНОГО ЭЛЕМЕНТА
  align-self: stretch; // ПО УМОЛЧАНИЮ элементы растянуты от одного края контейнера до другого
  align-self: flex-start; // по началу флекс-контейнера
  align-self: flex-end; // по концу флекс-контейнера
  align-self: center; // центральная ось контейнера делит каждый элемент пополам
  align-self: baseline; // базовые линии всех флекс-элементов становятся продолжением базовой линии первого по порядку

  //* БАЗОВЫЙ РАЗМЕР
  flex-basis: 100px; // Значение задаётся в пикселях (ширина, если флекс-элементы отображаются в ряд, и высота — если в колонку)

  //* РАСПРЕДЕЛЕНИЕ ПРОСТРАНСТВА, ОТВЕДЕННОГО ЭЛЕМЕНТУ
  // Когда элементы занимают не весь контейнер, остаётся свободное пространство. Это пространство можно распределить.
  // когда пространство родителя больше, чем нужно элементам:
  flex-grow: 1; // ПО УМОЛЧАНИЮ Первый элемент - получит столько же пространства, сколько и второй
  flex-grow: 1; // ПО УМОЛЧАНИЮ Второй элемент - получит столько же пространства, сколько и первый

  flex-grow: 3; // Первый элемент получит 3/4 пространства
  flex-grow: 1; // Второй элемент получит 1/4 пространства

  flex-grow: 0; // Первый элемент получит 0% пространства
  flex-grow: 1; // Второй элемент получит 100% пространства

  // Когда пространство родителя меньше, чем нужно элементам (указывает на то, насколько каждый элемент урежется при нехватке места)
  flex-shrink: 1; // ПО УМОЛЧАНИЮ Первый элемент - урежется настолько, сколько и второй
  flex-shrink: 1; // ПО УМОЛЧАНИЮ Второй элемент - урежется настолько, сколько и первый

  flex-shrink: 3; // Первый элемент урежется на 3/4
  flex-shrink: 1; // Второй элемент урежется на 1/4
}
