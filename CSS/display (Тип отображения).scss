//# display (Тип отображения)
/*
- Свойство display нельзя анимировать
- Если задаёте display: inline-block, чтобы выстроить несколько блоков в строку, обязательно указывайте для родительского элемента font-size: 0. Иначе между строчно-блочными элементами будут небольшие отступы, как между словами — пробелы.
-
*/

//# значения
.element {
  display: block;
  /* Блочный контекст форматирования:
  - Занимает всю ширину своего родителя.
  - Располагается на новой строке.
  - Высота блочного элемента по умолчанию равна высоте его содержимого.
  - Мы можем управлять width, height, background.
  - Если у одного блока задан margin-bottom, а у следующего за ним margin-top, то они схлопнутся.
  - Итоговый отступ будет равен бо́льшему отступу из двух.
  */

  display: inline;
  /* Строчный контекст форматирования:
  - Ширина и высота строчного элемента равна ширине и высоте содержимого.
  - Отступы зависят от шрифта (обнуление отступов font-size: 0).
  - Мы не можем управлять width, height, background.
  - Если ширины родителя не хватает, то лишний текст строчного элемента переносится на следующую строку.
  */

  display: inline-block;
  /* Блочно-строчный контекст форматирования:
  - Элемент ведёт себя снаружи как строчный, а внутри как блочный.
  - Не игнорирует свойства width и height.
  - Выравнивается по последней строке текста внутри них. Выравнивание по верхней строчке - vertical-align: top. Можно использовать text-align.
  - Если задаёте display: inline-block, чтобы выстроить несколько блоков в строку, обязательно указывайте для родительского элемента font-size: 0. Иначе между строчно-блочными элементами будут небольшие отступы, как между словами  пробелы.
  */

  display: flex;
  // Элемент становится флекс-контейнером, ведёт себя как блочный, а вложенные элементы становятся флекс-элементам.

  display: inline-flex;
  // Элемент становится флекс-контейнером, ведёт себя как строчный, а вложенные элементы становятся флекс-элементам.

  display: grid;
  // Элемент становится грид-контейнером. Снаружи грид-контейнер ведёт себя как блок. Дочерние элементы такого контейнера начинают подчиняться правилам грид-раскладки.

  display: inline-grid;
  // Элемент становится грид-контейнером. Снаружи грид-контейнер ведёт себя как строчный элемент. Дочерние элементы такого контейнера начинают подчиняться правилам грид-раскладки.

  display: none;
  // Полностью скрывает элемент со страницы, не удаляя его при этом из HTML-разметки.
}
