//# Начало работы с Redux
// Redux — это контейнер с предсказуемым состоянием для приложений JavaScript.

// Это помогает вам писать приложения, которые ведут себя согласованно, работают в различных средах (клиентских, серверных и собственных) и легко тестируются. Кроме того, он предоставляет отличные возможности для разработчиков, такие как редактирование кода в реальном времени в сочетании с отладчиком, путешествующим во времени.

// Вы можете использовать Redux вместе с React или с любой другой библиотекой представлений. Он крошечный (2 КБ, включая зависимости), но имеет большую экосистему доступных дополнений.

// Redux Toolkit — наш официальный рекомендуемый подход для написания логики Redux. Он охватывает ядро ​​Redux и содержит пакеты и функции, которые, по нашему мнению, необходимы для создания приложения Redux. Redux Toolkit использует предложенные нами лучшие практики, упрощает большинство задач Redux, предотвращает распространенные ошибки и упрощает написание приложений Redux.

// RTK включает в себя утилиты, которые помогают упростить многие распространенные случаи использования, включая настройку хранилища store setup, создание reducers и написание неизменяемой (иммутабельной) логики обновления и даже одновременное создание целых фрагментов состояния (slices).

// Независимо от того, являетесь ли вы новым пользователем Redux, настраивающим свой первый проект, или опытным пользователем, желающим упростить существующее приложение, Redux Toolkit поможет вам улучшить ваш код Redux.

//# Установка Redux Toolkit
// Redux Toolkit доступен в виде пакета в NPM для использования с сборщиком модулей или в приложении Node:

// NPM
//* npm install @reduxjs/toolkit

// Yarn
//* yarn add @reduxjs/toolkit

//# Установка Create a React Redux App
// Рекомендуемый способ запуска новых приложений с помощью React и Redux — использовать наш официальный шаблон Redux+TS для Vite или создать новый проект Next.js с использованием шаблона Next с Redux.

// Оба из них уже имеют Redux Toolkit и React-Redux, настроенные соответствующим образом для этого инструмента сборки, и поставляются с небольшим примером приложения, которое демонстрирует, как использовать некоторые функции Redux Toolkit.

// Next.js using the `with-redux` template
//* npx create-next-app --example with-redux my-app

// Vite with our Redux+TS template
// (using the `degit` tool to clone and extract the template)
//* npx degit reduxjs/redux-templates/packages/vite-template-redux my-app

// В настоящее время у нас нет официальных шаблонов React Native, но мы рекомендуем эти шаблоны для стандартного React Native и Expo:
//* https://github.com/rahsheen/react-native-template-redux-typescript
//* https://github.com/rahsheen/expo-template-redux-typescript

//# Установка Redux Core
// Основная библиотека Redux доступна в виде пакета в NPM для использования с сборщиком модулей или в приложении Node:

// NPM
//* npm install redux

// Yarn
//* yarn add redux

// В пакет входит предварительно скомпилированная сборка ESM, которую можно использовать в качестве <script type="module"> прямо в браузере.

// Более подробную информацию смотрите на странице "02. Установка".

//# Базовый пример
// Все глобальное состояние вашего приложения хранится в дереве объектов внутри одного хранилища store. Единственный способ изменить дерево состояний — создать action (объект, описывающий произошедшее), и dispatch (отправить) его в хранилище store. Чтобы указать, как состояние state обновляется в ответ на действие action, вы пишете чистые функции-reducer, которые вычисляют новое состояние state на основе старого состояния и действия action. Redux Toolkit упрощает процесс написания логики Redux и настройки хранилища state. С Redux Toolkit базовая логика приложения выглядит так:

import { createSlice, configureStore } from '@reduxjs/toolkit';

const counterSlice = createSlice({
  name: 'counter',
  initialState: {
    value: 0,
  },
  reducers: {
    incremented: state => {
      // Redux Toolkit позволяет нам писать «мутирующую» логику в редукторах.
      // Это фактически не изменяет состояние, поскольку использует библиотеку Immer
      // которая обнаруживает изменения в «черновом состоянии» и создает совершенно новое
      // неизменяемое состояние, основанное на этих изменениях
      state.value += 1;
    },
    decremented: state => {
      state.value -= 1;
    },
  },
});

export const { incremented, decremented } = counterSlice.actions;

const store = configureStore({
  reducer: counterSlice.reducer,
});

// Еще можно подписаться на событие "изменение/обновление store".
store.subscribe(() => console.log(store.getState()));

// Объекты действий action по-прежнему передаются в диспетчерскую службу dispatch, но они создаются за нас функциями action-creator
store.dispatch(incremented()); // {value: 1}
store.dispatch(incremented()); // {value: 2}
store.dispatch(decremented()); // {value: 1}
